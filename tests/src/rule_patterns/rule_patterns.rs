/// Generated by rustemo. Do not edit manually!
use regex::Regex;
use num_enum::TryFromPrimitive;
use std::{convert::TryFrom, fmt::Debug};
use rustemo_rt::lexer::{Lexer, Token};
use rustemo_rt::parser::Parser;
use rustemo_rt::builder::Builder;
use rustemo_rt::Result;
use rustemo_rt::lr::lexer::{
    LRStringLexer, LRContext, LexerDefinition, RecognizerIterator,
};
use rustemo_rt::lr::builder::LRBuilder;
use rustemo_rt::lr::parser::{LRParser, ParserDefinition};
use rustemo_rt::lr::parser::Action::{self, Shift, Reduce, Accept, Error};
use rustemo_rt::index::{StateIndex, TermIndex, NonTermIndex, ProdIndex};
use rustemo_rt::grammar::{TerminalInfo, TerminalInfos, TerminalsState};
use rustemo_rt::debug::{log, logn};
use super::rule_patterns_actions;
const TERMINAL_NO: usize = 2usize;
const NONTERMINAL_NO: usize = 8usize;
const STATE_NO: usize = 3usize;
const MAX_ACTIONS: usize = 2usize;
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
#[repr(usize)]
pub enum TermKind {
    STOP = 0usize,
    TB = 1usize,
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[derive(Debug)]
pub enum Terminal {
    STOP,
    TB,
}
#[derive(Debug)]
pub enum NonTerminal {
    A(rule_patterns_actions::A),
    B(rule_patterns_actions::B),
    C(rule_patterns_actions::C),
    D(rule_patterns_actions::D),
    E(rule_patterns_actions::E),
    F(rule_patterns_actions::F),
}
#[derive(Copy, Clone, TryFromPrimitive)]
#[repr(usize)]
pub enum ProdKind {
    AP1 = 1usize,
    AP2 = 2usize,
    BP1 = 3usize,
    BP2 = 4usize,
    BP3 = 5usize,
    CP1 = 6usize,
    CP2 = 7usize,
    DP1 = 8usize,
    DP2 = 9usize,
    EP1 = 10usize,
    EP2 = 11usize,
    EP3 = 12usize,
    FP1 = 13usize,
    FP2 = 14usize,
    FP3 = 15usize,
}
pub struct RulePatternsParserDefinition {
    actions: [[Action; TERMINAL_NO]; STATE_NO],
    gotos: [[Option<StateIndex>; NONTERMINAL_NO]; STATE_NO],
}
pub(crate) static PARSER_DEFINITION: RulePatternsParserDefinition = RulePatternsParserDefinition {
    actions: [
        [
            Reduce(ProdIndex(2usize), 0usize, NonTermIndex(2usize), "<?>"),
            Shift(StateIndex(1usize), TermIndex(1usize)),
        ],
        [Reduce(ProdIndex(1usize), 1usize, NonTermIndex(2usize), "<?>"), Error],
        [Accept, Error],
    ],
    gotos: [
        [None, None, Some(StateIndex(2usize)), None, None, None, None, None],
        [None, None, None, None, None, None, None, None],
        [None, None, None, None, None, None, None, None],
    ],
};
impl ParserDefinition for RulePatternsParserDefinition {
    fn action(&self, state_index: StateIndex, term_index: TermIndex) -> Action {
        PARSER_DEFINITION.actions[state_index.0][term_index.0]
    }
    fn goto(&self, state_index: StateIndex, nonterm_index: NonTermIndex) -> StateIndex {
        PARSER_DEFINITION.gotos[state_index.0][nonterm_index.0].unwrap()
    }
}
pub struct RulePatternsParser(LRParser<RulePatternsParserDefinition>);
impl<I, L, B> Parser<I, LRContext<I>, L, B> for RulePatternsParser
where
    I: Debug,
    L: Lexer<I, LRContext<I>>,
    B: LRBuilder<I>,
{
    fn parse(
        &mut self,
        context: LRContext<I>,
        lexer: L,
        builder: B,
    ) -> Result<B::Output> {
        RulePatternsParser::default().0.parse(context, lexer, builder)
    }
}
#[allow(dead_code)]
impl RulePatternsParser {
    pub fn parse_str<'i>(
        input: &'i str,
    ) -> Result<<RulePatternsBuilder as Builder>::Output> {
        let context = LRContext::new("<str>".to_string(), input);
        let lexer = LRStringLexer::new(&LEXER_DEFINITION);
        let builder = RulePatternsBuilder::new();
        RulePatternsParser::default().0.parse(context, lexer, builder)
    }
}
impl Default for RulePatternsParser {
    fn default() -> Self {
        Self(LRParser::new(&PARSER_DEFINITION))
    }
}
pub struct RulePatternsLexerDefinition {
    terminals: TerminalInfos<TERMINAL_NO>,
    terminals_for_state: TerminalsState<MAX_ACTIONS, STATE_NO>,
    recognizers: [fn(&str) -> Option<&str>; TERMINAL_NO],
}
pub(crate) static LEXER_DEFINITION: RulePatternsLexerDefinition = RulePatternsLexerDefinition {
    terminals: [
        TerminalInfo {
            id: TermIndex(0usize),
            name: "STOP",
            location: None,
        },
        TerminalInfo {
            id: TermIndex(1usize),
            name: "TB",
            location: None,
        },
    ],
    terminals_for_state: [
        [Some(0usize), Some(1usize)],
        [Some(0usize), None],
        [Some(0usize), None],
    ],
    recognizers: [
        |input: &str| {
            logn!("Recognizing <STOP> -- ");
            if input.len() == 0 {
                log!("recognized");
                Some("")
            } else {
                log!("not recognized");
                None
            }
        },
        |input: &str| {
            logn!("Recognizing <{}> -- ", "TB");
            if input.starts_with("b") {
                log!("recognized");
                Some("b")
            } else {
                log!("not recognized");
                None
            }
        },
    ],
};
impl LexerDefinition for RulePatternsLexerDefinition {
    type Recognizer = for<'i> fn(&'i str) -> Option<&'i str>;
    fn recognizers(
        &self,
        state_index: StateIndex,
    ) -> RecognizerIterator<Self::Recognizer> {
        RecognizerIterator {
            terminals: &LEXER_DEFINITION.terminals,
            terminals_for_state: &LEXER_DEFINITION
                .terminals_for_state[state_index.0][..],
            recognizers: &LEXER_DEFINITION.recognizers,
            index: 0,
        }
    }
}
pub struct RulePatternsBuilder {
    res_stack: Vec<Symbol>,
}
impl Builder for RulePatternsBuilder {
    type Output = rule_patterns_actions::A;
    fn new() -> Self {
        Self { res_stack: vec![] }
    }
    fn get_result(&mut self) -> Result<Self::Output> {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::A(r)) => Ok(r),
            _ => panic!("Invalid result on the parsing stack!"),
        }
    }
}
impl<'i> LRBuilder<&'i str> for RulePatternsBuilder {
    #![allow(unused_variables)]
    fn shift_action(&mut self, term_idx: TermIndex, token: Token<&'i str>) {
        let termval = match TermKind::try_from(term_idx.0).unwrap() {
            TermKind::STOP => Terminal::STOP,
            TermKind::TB => Terminal::TB,
        };
        self.res_stack.push(Symbol::Terminal(termval));
    }
    fn reduce_action(
        &mut self,
        prod_kind: ProdIndex,
        _prod_len: usize,
        _prod_str: &'static str,
    ) {
        let prod = match ProdKind::try_from(prod_kind.0).unwrap() {
            ProdKind::AP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::A(rule_patterns_actions::a_v1())
            }
            ProdKind::AP2 => NonTerminal::A(rule_patterns_actions::a_empty()),
            ProdKind::BP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::B(p0)),
                        Symbol::NonTerminal(NonTerminal::A(p1)),
                    ) => NonTerminal::B(rule_patterns_actions::b_v1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::A(p0)) => {
                        NonTerminal::B(rule_patterns_actions::b_v2(p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BP3 => NonTerminal::B(rule_patterns_actions::b_empty()),
            ProdKind::CP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::C(p0)),
                        Symbol::NonTerminal(NonTerminal::A(p1)),
                    ) => NonTerminal::C(rule_patterns_actions::c_v1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::A(p0)) => {
                        NonTerminal::C(rule_patterns_actions::c_v2(p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::A(p0)) => {
                        NonTerminal::D(rule_patterns_actions::d_v1(p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DP2 => NonTerminal::D(rule_patterns_actions::d_empty()),
            ProdKind::EP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::A(p0)),
                        Symbol::NonTerminal(NonTerminal::B(p1)),
                        Symbol::NonTerminal(NonTerminal::C(p2)),
                    ) => NonTerminal::E(rule_patterns_actions::e_v1(p0, p1, p2)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::D(p0)) => {
                        NonTerminal::E(rule_patterns_actions::e_v2(p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EP3 => NonTerminal::E(rule_patterns_actions::e_empty()),
            ProdKind::FP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::B(p0)),
                        Symbol::NonTerminal(NonTerminal::F(p1)),
                    ) => NonTerminal::F(rule_patterns_actions::f_v1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::B(p0)) => {
                        NonTerminal::F(rule_patterns_actions::f_v2(p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FP3 => NonTerminal::F(rule_patterns_actions::f_empty()),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
