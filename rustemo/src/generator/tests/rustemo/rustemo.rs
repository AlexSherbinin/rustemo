/// Generated by rustemo on 2022-07-17 16:32:11.678669670 +02:00

use regex::Regex;
use std::convert::TryFrom;

use std::marker::PhantomData;
use rustemo_rt::lexer::{Lexer, DefaultLexer, Token, LexerDefinition, RecognizerIterator};
use rustemo_rt::lr::{LRParser, LRContext, ParserDefinition};
use rustemo_rt::lr::Action::{self, Shift, Reduce, Accept, Error};
use rustemo_rt::index::{StateIndex, TermIndex, NonTermIndex, ProdIndex};
use rustemo_rt::builder::Builder;
use rustemo_rt::grammar::{TerminalInfo, TerminalInfos, TerminalsState};
use rustemo_rt::debug::{log, logn};
use rustemo::rustemo_types::{TermKind, ProdKind, Terminal, NonTerminal, Symbol};

use super::rustemo_actions::*;

const TERMINAL_NO: usize = 44;
const NONTERMINAL_NO: usize = 35;
const STATE_NO: usize = 113;
const MAX_ACTIONS: usize = 9;

pub struct RustemoParserDefinition {
    actions: [[Action; TERMINAL_NO]; STATE_NO],
    gotos: [[Option<StateIndex>; NONTERMINAL_NO]; STATE_NO]
}

pub(in crate) static PARSER_DEFINITION: RustemoParserDefinition = RustemoParserDefinition {
    actions: [
    // State 0:AUG
    [Error, Shift(StateIndex(1), TermIndex(1)), Shift(StateIndex(2), TermIndex(2)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 1:Terminals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(8), TermIndex(40)), Error, Error, Error],
    // State 2:Import
    [Error, Error, Reduce(ProdIndex(7), 1, NonTermIndex(3), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(7), 1, NonTermIndex(3), "<?>"), Error, Error, Error],
    // State 3:Action
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(11), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 4:File
    [Reduce(ProdIndex(0), 1, NonTermIndex(1), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 5:Imports
    [Error, Error, Shift(StateIndex(12), TermIndex(2)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 6:GrammarRules
    [Reduce(ProdIndex(1), 1, NonTermIndex(2), "<?>"), Shift(StateIndex(14), TermIndex(1)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 7:GrammarRule
    [Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Error, Error, Error],
    // State 8:Action
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(16), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 9:TerminalRules
    [Reduce(ProdIndex(5), 2, NonTermIndex(2), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(8), TermIndex(40)), Error, Error, Error],
    // State 10:TerminalRule
    [Reduce(ProdIndex(19), 1, NonTermIndex(9), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(19), 1, NonTermIndex(9), "<?>"), Error, Error, Error],
    // State 11:Name
    [Error, Error, Error, Error, Shift(StateIndex(18), TermIndex(4)), Error, Error, Shift(StateIndex(19), TermIndex(7)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 12:Import
    [Error, Error, Reduce(ProdIndex(6), 2, NonTermIndex(3), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(6), 2, NonTermIndex(3), "<?>"), Error, Error, Error],
    // State 13:GrammarRules
    [Reduce(ProdIndex(2), 2, NonTermIndex(2), "<?>"), Shift(StateIndex(20), TermIndex(1)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 14:Terminals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(8), TermIndex(40)), Error, Error, Error],
    // State 15:GrammarRule
    [Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Error, Error, Error],
    // State 16:Name
    [Error, Error, Error, Error, Shift(StateIndex(22), TermIndex(4)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 17:TerminalRule
    [Reduce(ProdIndex(18), 2, NonTermIndex(9), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(18), 2, NonTermIndex(9), "<?>"), Error, Error, Error],
    // State 18:Colon
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(23), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(24), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 19:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(35), TermIndex(22)), Shift(StateIndex(36), TermIndex(23)), Shift(StateIndex(37), TermIndex(24)), Shift(StateIndex(38), TermIndex(25)), Shift(StateIndex(39), TermIndex(26)), Shift(StateIndex(40), TermIndex(27)), Shift(StateIndex(41), TermIndex(28)), Error, Error, Error, Error, Error, Shift(StateIndex(42), TermIndex(34)), Error, Shift(StateIndex(43), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 20:Terminals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(8), TermIndex(40)), Error, Error, Error],
    // State 21:TerminalRules
    [Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(8), TermIndex(40)), Error, Error, Error],
    // State 22:Colon
    [Error, Error, Error, Error, Error, Shift(StateIndex(48), TermIndex(5)), Error, Shift(StateIndex(49), TermIndex(7)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(50), TermIndex(35)), Error, Error, Error, Shift(StateIndex(51), TermIndex(39)), Error, Error, Error, Error],
    // State 23:OBracket
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(23), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(24), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 24:Name
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Shift(StateIndex(54), TermIndex(20)), Shift(StateIndex(55), TermIndex(21)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 25:StrConst
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 26:GrammarRuleRHS
    [Error, Error, Error, Error, Error, Shift(StateIndex(56), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(57), TermIndex(13)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 27:Production
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 1, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(15), 1, NonTermIndex(7), "<?>"), Error, Error, Reduce(ProdIndex(15), 1, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 28:Assignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error],
    // State 29:Assignments
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(16), 1, NonTermIndex(8), "<?>"), Error, Shift(StateIndex(58), TermIndex(7)), Error, Shift(StateIndex(23), TermIndex(9)), Reduce(ProdIndex(16), 1, NonTermIndex(8), "<?>"), Error, Error, Reduce(ProdIndex(16), 1, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(24), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 30:PlainAssignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error],
    // State 31:BoolAssignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error],
    // State 32:ProductionGroup
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(60), TermIndex(14)), Shift(StateIndex(61), TermIndex(15)), Shift(StateIndex(62), TermIndex(16)), Shift(StateIndex(63), TermIndex(17)), Shift(StateIndex(64), TermIndex(18)), Shift(StateIndex(65), TermIndex(19)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 33:GSymbolReference
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error],
    // State 34:GSymbol
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(60), TermIndex(14)), Shift(StateIndex(61), TermIndex(15)), Shift(StateIndex(62), TermIndex(16)), Shift(StateIndex(63), TermIndex(17)), Shift(StateIndex(64), TermIndex(18)), Shift(StateIndex(65), TermIndex(19)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 35:Left
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(24), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(24), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 36:Right
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(26), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(26), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 37:Reduce
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(25), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(25), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 38:Shift
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(27), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(27), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 39:Dynamic
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(28), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(28), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 40:NOPS
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(29), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(29), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 41:NOPSE
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(30), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(30), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 42:Name
    [Error, Error, Error, Error, Shift(StateIndex(69), TermIndex(4)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 43:IntConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(31), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(31), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 44:ProdMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(34), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(34), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 45:ProdMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(70), TermIndex(6)), Error, Shift(StateIndex(71), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 46:UserMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(32), 1, NonTermIndex(11), "<?>"), Error, Reduce(ProdIndex(32), 1, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 47:TerminalRules
    [Reduce(ProdIndex(4), 4, NonTermIndex(2), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(8), TermIndex(40)), Error, Error, Error],
    // State 48:SemiColon
    [Reduce(ProdIndex(21), 4, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(21), 4, NonTermIndex(10), "<?>"), Error, Error, Error],
    // State 49:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(72), TermIndex(26)), Error, Error, Shift(StateIndex(73), TermIndex(29)), Shift(StateIndex(74), TermIndex(30)), Shift(StateIndex(75), TermIndex(31)), Error, Error, Shift(StateIndex(42), TermIndex(34)), Error, Shift(StateIndex(76), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 50:RegexTerm
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(72), 1, NonTermIndex(29), "<?>"), Error, Reduce(ProdIndex(72), 1, NonTermIndex(29), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 51:StrConst
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(71), 1, NonTermIndex(29), "<?>"), Error, Reduce(ProdIndex(71), 1, NonTermIndex(29), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 52:Recognizer
    [Error, Error, Error, Error, Error, Shift(StateIndex(80), TermIndex(5)), Error, Shift(StateIndex(81), TermIndex(7)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 53:GrammarRuleRHS
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(82), TermIndex(10)), Error, Error, Shift(StateIndex(57), TermIndex(13)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 54:Equals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(23), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(83), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 55:QEquals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(23), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(83), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 56:SemiColon
    [Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Error, Error, Error],
    // State 57:Choice
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(23), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(24), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 58:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(35), TermIndex(22)), Shift(StateIndex(36), TermIndex(23)), Shift(StateIndex(37), TermIndex(24)), Shift(StateIndex(38), TermIndex(25)), Shift(StateIndex(39), TermIndex(26)), Shift(StateIndex(40), TermIndex(27)), Shift(StateIndex(41), TermIndex(28)), Error, Error, Error, Error, Error, Shift(StateIndex(42), TermIndex(34)), Error, Shift(StateIndex(43), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 59:Assignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(51), 2, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(51), 2, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(51), 2, NonTermIndex(18), "<?>"), Error, Error, Error, Reduce(ProdIndex(51), 2, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(51), 2, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(51), 2, NonTermIndex(18), "<?>"), Error, Error, Error, Error],
    // State 60:ZeroOrMore
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(59), 1, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 61:ZeroOrMoreGreedy
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(60), 1, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 62:OneOrMore
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(61), 1, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 63:OneOrMoreGreedy
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(62), 1, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 64:Optional
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(63), 1, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 65:OptionalGreedy
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(64), 1, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 66:RepetitionOperator
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(57), 2, NonTermIndex(22), "<?>"), Error, Reduce(ProdIndex(57), 2, NonTermIndex(22), "<?>"), Error, Reduce(ProdIndex(57), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Reduce(ProdIndex(57), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(57), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(57), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Error],
    // State 67:RepetitionOperatorOp
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(88), TermIndex(11)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 68:RepetitionOperator
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(56), 2, NonTermIndex(22), "<?>"), Error, Reduce(ProdIndex(56), 2, NonTermIndex(22), "<?>"), Error, Reduce(ProdIndex(56), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Reduce(ProdIndex(56), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(56), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(56), 2, NonTermIndex(22), "<?>"), Error, Error, Error, Error],
    // State 69:Colon
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(90), TermIndex(36)), Shift(StateIndex(91), TermIndex(37)), Shift(StateIndex(92), TermIndex(38)), Shift(StateIndex(93), TermIndex(39)), Error, Error, Error, Error],
    // State 70:Comma
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(35), TermIndex(22)), Shift(StateIndex(36), TermIndex(23)), Shift(StateIndex(37), TermIndex(24)), Shift(StateIndex(38), TermIndex(25)), Shift(StateIndex(39), TermIndex(26)), Shift(StateIndex(40), TermIndex(27)), Shift(StateIndex(41), TermIndex(28)), Error, Error, Error, Error, Error, Shift(StateIndex(42), TermIndex(34)), Error, Shift(StateIndex(43), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 71:CBrace
    [Error, Error, Error, Error, Shift(StateIndex(96), TermIndex(4)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 72:Dynamic
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(38), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(38), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 73:Prefer
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(35), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(35), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 74:Finish
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(36), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(36), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 75:NoFinish
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(37), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(37), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 76:IntConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(39), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(39), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 77:TermMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(42), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(42), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 78:TermMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(97), TermIndex(6)), Error, Shift(StateIndex(98), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 79:UserMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(40), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(40), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 80:SemiColon
    [Reduce(ProdIndex(20), 5, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(20), 5, NonTermIndex(10), "<?>"), Error, Error, Error],
    // State 81:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(72), TermIndex(26)), Error, Error, Shift(StateIndex(73), TermIndex(29)), Shift(StateIndex(74), TermIndex(30)), Shift(StateIndex(75), TermIndex(31)), Error, Error, Shift(StateIndex(42), TermIndex(34)), Error, Shift(StateIndex(76), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 82:CBracket
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(55), 3, NonTermIndex(21), "<?>"), Reduce(ProdIndex(55), 3, NonTermIndex(21), "<?>"), Reduce(ProdIndex(55), 3, NonTermIndex(21), "<?>"), Reduce(ProdIndex(55), 3, NonTermIndex(21), "<?>"), Reduce(ProdIndex(55), 3, NonTermIndex(21), "<?>"), Reduce(ProdIndex(55), 3, NonTermIndex(21), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 83:Name
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(69), 1, NonTermIndex(28), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 84:GSymbolReference
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(53), 3, NonTermIndex(19), "<?>"), Error, Reduce(ProdIndex(53), 3, NonTermIndex(19), "<?>"), Error, Reduce(ProdIndex(53), 3, NonTermIndex(19), "<?>"), Error, Error, Error, Reduce(ProdIndex(53), 3, NonTermIndex(19), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(53), 3, NonTermIndex(19), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(53), 3, NonTermIndex(19), "<?>"), Error, Error, Error, Error],
    // State 85:GSymbolReference
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(54), 3, NonTermIndex(20), "<?>"), Error, Reduce(ProdIndex(54), 3, NonTermIndex(20), "<?>"), Error, Reduce(ProdIndex(54), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Reduce(ProdIndex(54), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(54), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(54), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Error],
    // State 86:Production
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(14), 3, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(14), 3, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 87:ProdMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(70), TermIndex(6)), Error, Shift(StateIndex(100), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 88:OSBracket
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(101), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 89:RepetitionModifiersExp
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error],
    // State 90:IntConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(44), 1, NonTermIndex(16), "<?>"), Error, Reduce(ProdIndex(44), 1, NonTermIndex(16), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 91:FloatConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(45), 1, NonTermIndex(16), "<?>"), Error, Reduce(ProdIndex(45), 1, NonTermIndex(16), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 92:BoolConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(46), 1, NonTermIndex(16), "<?>"), Error, Reduce(ProdIndex(46), 1, NonTermIndex(16), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 93:StrConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(47), 1, NonTermIndex(16), "<?>"), Error, Reduce(ProdIndex(47), 1, NonTermIndex(16), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 94:Const
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(43), 3, NonTermIndex(15), "<?>"), Error, Reduce(ProdIndex(43), 3, NonTermIndex(15), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 95:ProdMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(33), 3, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(33), 3, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 96:Colon
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(23), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(24), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(25), TermIndex(39)), Error, Error, Error, Error],
    // State 97:Comma
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(72), TermIndex(26)), Error, Error, Shift(StateIndex(73), TermIndex(29)), Shift(StateIndex(74), TermIndex(30)), Shift(StateIndex(75), TermIndex(31)), Error, Error, Shift(StateIndex(42), TermIndex(34)), Error, Shift(StateIndex(76), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 98:CBrace
    [Error, Error, Error, Error, Error, Shift(StateIndex(106), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 99:TermMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(97), TermIndex(6)), Error, Shift(StateIndex(107), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 100:CBrace
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(17), 4, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(17), 4, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 101:Name
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(68), 1, NonTermIndex(27), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(68), 1, NonTermIndex(27), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 102:RepetitionModifiers
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(108), TermIndex(6)), Error, Error, Error, Error, Error, Shift(StateIndex(109), TermIndex(12)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 103:RepetitionModifier
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 104:GrammarRuleRHS
    [Error, Error, Error, Error, Error, Shift(StateIndex(110), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(57), TermIndex(13)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 105:TermMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(41), 3, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(41), 3, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 106:SemiColon
    [Reduce(ProdIndex(23), 7, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(23), 7, NonTermIndex(10), "<?>"), Error, Error, Error],
    // State 107:CBrace
    [Error, Error, Error, Error, Error, Shift(StateIndex(111), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 108:Comma
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(101), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 109:CSBracket
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(65), 3, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(65), 3, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(65), 3, NonTermIndex(25), "<?>"), Error, Error, Error, Reduce(ProdIndex(65), 3, NonTermIndex(25), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(65), 3, NonTermIndex(25), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(65), 3, NonTermIndex(25), "<?>"), Error, Error, Error, Error],
    // State 110:SemiColon
    [Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Error, Error, Error],
    // State 111:SemiColon
    [Reduce(ProdIndex(22), 8, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(22), 8, NonTermIndex(10), "<?>"), Error, Error, Error],
    // State 112:RepetitionModifier
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(66), 3, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(66), 3, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
],
    gotos: [
    // State 0:AUG
    [None, None, Some(StateIndex(4)), Some(StateIndex(5)), None, Some(StateIndex(6)), Some(StateIndex(7)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 1:Terminals
    [None, None, None, None, None, None, None, None, None, Some(StateIndex(9)), Some(StateIndex(10)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 2:Import
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 3:Action
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 4:File
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 5:Imports
    [None, None, None, None, None, Some(StateIndex(13)), Some(StateIndex(7)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 6:GrammarRules
    [None, None, None, None, None, None, Some(StateIndex(15)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 7:GrammarRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 8:Action
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 9:TerminalRules
    [None, None, None, None, None, None, None, None, None, None, Some(StateIndex(17)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 10:TerminalRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 11:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 12:Import
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 13:GrammarRules
    [None, None, None, None, None, None, Some(StateIndex(15)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 14:Terminals
    [None, None, None, None, None, None, None, None, None, Some(StateIndex(21)), Some(StateIndex(10)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 15:GrammarRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 16:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 17:TerminalRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 18:Colon
    [None, None, None, None, None, None, None, Some(StateIndex(26)), Some(StateIndex(27)), None, None, None, None, None, None, None, None, Some(StateIndex(28)), Some(StateIndex(29)), Some(StateIndex(30)), Some(StateIndex(31)), Some(StateIndex(32)), Some(StateIndex(33)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 19:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(44)), Some(StateIndex(45)), None, None, Some(StateIndex(46)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 20:Terminals
    [None, None, None, None, None, None, None, None, None, Some(StateIndex(47)), Some(StateIndex(10)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 21:TerminalRules
    [None, None, None, None, None, None, None, None, None, None, Some(StateIndex(17)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 22:Colon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(52)), None, None, None, None, None],
    // State 23:OBracket
    [None, None, None, None, None, None, None, Some(StateIndex(53)), Some(StateIndex(27)), None, None, None, None, None, None, None, None, Some(StateIndex(28)), Some(StateIndex(29)), Some(StateIndex(30)), Some(StateIndex(31)), Some(StateIndex(32)), Some(StateIndex(33)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 24:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 25:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 26:GrammarRuleRHS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 27:Production
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 28:Assignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 29:Assignments
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(59)), None, Some(StateIndex(30)), Some(StateIndex(31)), Some(StateIndex(32)), Some(StateIndex(33)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 30:PlainAssignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 31:BoolAssignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 32:ProductionGroup
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(66)), Some(StateIndex(67)), None, None, None, None, None, None, None, None, None, None],
    // State 33:GSymbolReference
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 34:GSymbol
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(68)), Some(StateIndex(67)), None, None, None, None, None, None, None, None, None, None],
    // State 35:Left
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 36:Right
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 37:Reduce
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 38:Shift
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 39:Dynamic
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 40:NOPS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 41:NOPSE
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 42:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 43:IntConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 44:ProdMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 45:ProdMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 46:UserMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 47:TerminalRules
    [None, None, None, None, None, None, None, None, None, None, Some(StateIndex(17)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 48:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 49:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(77)), Some(StateIndex(78)), Some(StateIndex(79)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 50:RegexTerm
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 51:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 52:Recognizer
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 53:GrammarRuleRHS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 54:Equals
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(32)), Some(StateIndex(84)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 55:QEquals
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(32)), Some(StateIndex(85)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 56:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 57:Choice
    [None, None, None, None, None, None, None, None, Some(StateIndex(86)), None, None, None, None, None, None, None, None, Some(StateIndex(28)), Some(StateIndex(29)), Some(StateIndex(30)), Some(StateIndex(31)), Some(StateIndex(32)), Some(StateIndex(33)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 58:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(44)), Some(StateIndex(87)), None, None, Some(StateIndex(46)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 59:Assignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 60:ZeroOrMore
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 61:ZeroOrMoreGreedy
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 62:OneOrMore
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 63:OneOrMoreGreedy
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 64:Optional
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 65:OptionalGreedy
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 66:RepetitionOperator
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 67:RepetitionOperatorOp
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(89)), None, None, None, None, None, None, None, None, None],
    // State 68:RepetitionOperator
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 69:Colon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(94)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 70:Comma
    [None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(95)), None, None, None, Some(StateIndex(46)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 71:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 72:Dynamic
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 73:Prefer
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 74:Finish
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 75:NoFinish
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 76:IntConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 77:TermMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 78:TermMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 79:UserMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 80:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 81:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(77)), Some(StateIndex(99)), Some(StateIndex(79)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 82:CBracket
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 83:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 84:GSymbolReference
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 85:GSymbolReference
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 86:Production
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 87:ProdMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 88:OSBracket
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(102)), Some(StateIndex(103)), None, None, None, None, None, None, None],
    // State 89:RepetitionModifiersExp
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 90:IntConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 91:FloatConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 92:BoolConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 93:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 94:Const
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 95:ProdMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 96:Colon
    [None, None, None, None, None, None, None, Some(StateIndex(104)), Some(StateIndex(27)), None, None, None, None, None, None, None, None, Some(StateIndex(28)), Some(StateIndex(29)), Some(StateIndex(30)), Some(StateIndex(31)), Some(StateIndex(32)), Some(StateIndex(33)), None, None, None, None, None, Some(StateIndex(34)), None, None, None, None, None, None],
    // State 97:Comma
    [None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(105)), None, Some(StateIndex(79)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 98:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 99:TermMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 100:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 101:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 102:RepetitionModifiers
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 103:RepetitionModifier
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 104:GrammarRuleRHS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 105:TermMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 106:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 107:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 108:Comma
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(112)), None, None, None, None, None, None, None],
    // State 109:CSBracket
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 110:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 111:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 112:RepetitionModifier
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
]};

impl ParserDefinition for RustemoParserDefinition {
    fn action(&self, state_index: StateIndex, term_index: TermIndex) -> Action {
        PARSER_DEFINITION.actions[state_index.0][term_index.0]
    }
    fn goto(&self, state_index: StateIndex, nonterm_index: NonTermIndex) -> StateIndex {
        PARSER_DEFINITION.gotos[state_index.0][nonterm_index.0].unwrap()
    }
}

pub struct RustemoParser<'i>(pub LRParser<&'i str, RustemoParserDefinition>);

impl<'i> Parser<L, B> for RustemoParser<'i>
where
    L: Lexer<Input = &'i str>,
    B: Builder<Lexer = L>
{
    fn parse(&mut self, lexer: L, mut builder: B) -> B::Output {
        self.0.parse(lexer, builder)
    }
}

impl<'i> RustemoParser<'i> {
    pub fn parse_default(&mut self, lexer: RustemoLexer<'i>) -> File {
        let builder =
            RustemoBuilder::<'_, <RustemoLexer as Lexer>::Input>::new();
        match self.parse(lexer, builder) {
            Symbol::NonTerminal(NonTerminal::File(p)) => p,
            _ => {
                panic!("Invalid return type of inner parse.")
            }
        };
}

impl<'i> Default for RustemoParser<'i> {
    fn default() -> Self {
        Self(LRParser {
            context: LRContext {
                parse_stack: vec![StateIndex(0)],
                current_state: StateIndex(0),
                position: 0,
                token: None,
            },
            definition: &PARSER_DEFINITION,
        })
    }
}

pub struct RustemoLexerDefinition {
    terminals: TerminalInfos<TERMINAL_NO>,
    terminals_for_state: TerminalsState<MAX_ACTIONS, STATE_NO>,
    recognizers: [fn(&str) -> Option<&str>; TERMINAL_NO]
}

pub(in crate) static LEXER_DEFINITION: RustemoLexerDefinition = RustemoLexerDefinition {
    terminals: [
    TerminalInfo {
        id: TermIndex(0),
        name: "STOP",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(1),
        name: "Terminals",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(2),
        name: "Import",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(3),
        name: "As",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(4),
        name: "Colon",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(5),
        name: "SemiColon",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(6),
        name: "Comma",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(7),
        name: "OBrace",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(8),
        name: "CBrace",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(9),
        name: "OBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(10),
        name: "CBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(11),
        name: "OSBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(12),
        name: "CSBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(13),
        name: "Choice",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(14),
        name: "ZeroOrMore",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(15),
        name: "ZeroOrMoreGreedy",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(16),
        name: "OneOrMore",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(17),
        name: "OneOrMoreGreedy",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(18),
        name: "Optional",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(19),
        name: "OptionalGreedy",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(20),
        name: "Equals",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(21),
        name: "QEquals",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(22),
        name: "Left",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(23),
        name: "Right",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(24),
        name: "Reduce",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(25),
        name: "Shift",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(26),
        name: "Dynamic",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(27),
        name: "NOPS",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(28),
        name: "NOPSE",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(29),
        name: "Prefer",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(30),
        name: "Finish",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(31),
        name: "NoFinish",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(32),
        name: "OComment",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(33),
        name: "CComment",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(34),
        name: "Name",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(35),
        name: "RegexTerm",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(36),
        name: "IntConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(37),
        name: "FloatConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(38),
        name: "BoolConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(39),
        name: "StrConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(40),
        name: "Action",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(41),
        name: "WS",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(42),
        name: "CommentLine",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(43),
        name: "NotComment",
        location: None,
    },
],
    // Expected terminals/tokens indexed by state id.
    // Sorted by priority.
    terminals_for_state: [
    // State 0:AUG
    [Some(40), Some(2), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 1:Terminals
    [Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 2:Import
    [Some(40), Some(2), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 3:Action
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 4:File
    [Some(0), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 5:Imports
    [Some(40), Some(2), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 6:GrammarRules
    [Some(0), Some(40), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 7:GrammarRule
    [Some(0), Some(40), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 8:Action
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 9:TerminalRules
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 10:TerminalRule
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 11:Name
    [Some(4), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 12:Import
    [Some(40), Some(2), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 13:GrammarRules
    [Some(0), Some(40), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 14:Terminals
    [Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 15:GrammarRule
    [Some(0), Some(40), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 16:Name
    [Some(4), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 17:TerminalRule
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 18:Colon
    [Some(34), Some(39), Some(9), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 19:OBrace
    [Some(34), Some(36), Some(22), Some(27), Some(23), Some(25), Some(28), Some(24), Some(26), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 20:Terminals
    [Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 21:TerminalRules
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 22:Colon
    [Some(35), Some(39), Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 23:OBracket
    [Some(34), Some(39), Some(9), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 24:Name
    [Some(14), Some(16), Some(18), Some(20), Some(15), Some(17), Some(19), Some(21), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 25:StrConst
    [Some(14), Some(16), Some(18), Some(15), Some(17), Some(19), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 26:GrammarRuleRHS
    [Some(5), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 27:Production
    [Some(5), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 28:Assignment
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 29:Assignments
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 30:PlainAssignment
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 31:BoolAssignment
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 32:ProductionGroup
    [Some(14), Some(16), Some(18), Some(15), Some(17), Some(19), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 33:GSymbolReference
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 34:GSymbol
    [Some(14), Some(16), Some(18), Some(15), Some(17), Some(19), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 35:Left
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 36:Right
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 37:Reduce
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 38:Shift
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 39:Dynamic
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 40:NOPS
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 41:NOPSE
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 42:Name
    [Some(4), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 43:IntConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 44:ProdMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 45:ProdMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 46:UserMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 47:TerminalRules
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 48:SemiColon
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 49:OBrace
    [Some(34), Some(36), Some(29), Some(30), Some(26), Some(31), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 50:RegexTerm
    [Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 51:StrConst
    [Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 52:Recognizer
    [Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 53:GrammarRuleRHS
    [Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 54:Equals
    [Some(34), Some(39), Some(9), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 55:QEquals
    [Some(34), Some(39), Some(9), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 56:SemiColon
    [Some(0), Some(40), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 57:Choice
    [Some(34), Some(39), Some(9), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 58:OBrace
    [Some(34), Some(36), Some(22), Some(27), Some(23), Some(25), Some(28), Some(24), Some(26), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 59:Assignment
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 60:ZeroOrMore
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 61:ZeroOrMoreGreedy
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 62:OneOrMore
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 63:OneOrMoreGreedy
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 64:Optional
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 65:OptionalGreedy
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 66:RepetitionOperator
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 67:RepetitionOperatorOp
    [Some(11), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 68:RepetitionOperator
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 69:Colon
    [Some(36), Some(37), Some(38), Some(39), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 70:Comma
    [Some(34), Some(36), Some(22), Some(27), Some(23), Some(25), Some(28), Some(24), Some(26), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 71:CBrace
    [Some(4), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 72:Dynamic
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 73:Prefer
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 74:Finish
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 75:NoFinish
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 76:IntConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 77:TermMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 78:TermMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 79:UserMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 80:SemiColon
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 81:OBrace
    [Some(34), Some(36), Some(29), Some(30), Some(26), Some(31), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 82:CBracket
    [Some(14), Some(16), Some(18), Some(15), Some(17), Some(19), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 83:Name
    [Some(14), Some(16), Some(18), Some(15), Some(17), Some(19), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 84:GSymbolReference
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 85:GSymbolReference
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 86:Production
    [Some(5), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 87:ProdMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 88:OSBracket
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 89:RepetitionModifiersExp
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 90:IntConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 91:FloatConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 92:BoolConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 93:StrConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 94:Const
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 95:ProdMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 96:Colon
    [Some(34), Some(39), Some(9), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 97:Comma
    [Some(34), Some(36), Some(29), Some(30), Some(26), Some(31), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 98:CBrace
    [Some(5), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 99:TermMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 100:CBrace
    [Some(5), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 101:Name
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 102:RepetitionModifiers
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 103:RepetitionModifier
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 104:GrammarRuleRHS
    [Some(5), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 105:TermMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 106:SemiColon
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 107:CBrace
    [Some(5), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 108:Comma
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 109:CSBracket
    [Some(34), Some(39), Some(5), Some(7), Some(9), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 110:SemiColon
    [Some(0), Some(40), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 111:SemiColon
    [Some(0), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 112:RepetitionModifier
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
],
recognizers: [
    // 1:Terminals
    |input: &str| {
        logn!("Recognizing <Terminals> -- ");
        if input.starts_with("terminals"){
            log!("recognized");
            Some("terminals")
        } else {
            log!("not recognized");
            None
        }
    },
    // 2:Import
    |input: &str| {
        logn!("Recognizing <Import> -- ");
        if input.starts_with("import"){
            log!("recognized");
            Some("import")
        } else {
            log!("not recognized");
            None
        }
    },
    // 3:As
    |input: &str| {
        logn!("Recognizing <As> -- ");
        if input.starts_with("as"){
            log!("recognized");
            Some("as")
        } else {
            log!("not recognized");
            None
        }
    },
    // 4:Colon
    |input: &str| {
        logn!("Recognizing <Colon> -- ");
        if input.starts_with(":"){
            log!("recognized");
            Some(":")
        } else {
            log!("not recognized");
            None
        }
    },
    // 5:SemiColon
    |input: &str| {
        logn!("Recognizing <SemiColon> -- ");
        if input.starts_with(";"){
            log!("recognized");
            Some(";")
        } else {
            log!("not recognized");
            None
        }
    },
    // 6:Comma
    |input: &str| {
        logn!("Recognizing <Comma> -- ");
        if input.starts_with(","){
            log!("recognized");
            Some(",")
        } else {
            log!("not recognized");
            None
        }
    },
    // 7:OBrace
    |input: &str| {
        logn!("Recognizing <OBrace> -- ");
        if input.starts_with("{"){
            log!("recognized");
            Some("{")
        } else {
            log!("not recognized");
            None
        }
    },
    // 8:CBrace
    |input: &str| {
        logn!("Recognizing <CBrace> -- ");
        if input.starts_with("}"){
            log!("recognized");
            Some("}")
        } else {
            log!("not recognized");
            None
        }
    },
    // 9:OBracket
    |input: &str| {
        logn!("Recognizing <OBracket> -- ");
        if input.starts_with("("){
            log!("recognized");
            Some("(")
        } else {
            log!("not recognized");
            None
        }
    },
    // 10:CBracket
    |input: &str| {
        logn!("Recognizing <CBracket> -- ");
        if input.starts_with(")"){
            log!("recognized");
            Some(")")
        } else {
            log!("not recognized");
            None
        }
    },
    // 11:OSBracket
    |input: &str| {
        logn!("Recognizing <OSBracket> -- ");
        if input.starts_with("["){
            log!("recognized");
            Some("[")
        } else {
            log!("not recognized");
            None
        }
    },
    // 12:CSBracket
    |input: &str| {
        logn!("Recognizing <CSBracket> -- ");
        if input.starts_with("]"){
            log!("recognized");
            Some("]")
        } else {
            log!("not recognized");
            None
        }
    },
    // 13:Choice
    |input: &str| {
        logn!("Recognizing <Choice> -- ");
        if input.starts_with("|"){
            log!("recognized");
            Some("|")
        } else {
            log!("not recognized");
            None
        }
    },
    // 14:ZeroOrMore
    |input: &str| {
        logn!("Recognizing <ZeroOrMore> -- ");
        if input.starts_with("*"){
            log!("recognized");
            Some("*")
        } else {
            log!("not recognized");
            None
        }
    },
    // 15:ZeroOrMoreGreedy
    |input: &str| {
        logn!("Recognizing <ZeroOrMoreGreedy> -- ");
        if input.starts_with("*!"){
            log!("recognized");
            Some("*!")
        } else {
            log!("not recognized");
            None
        }
    },
    // 16:OneOrMore
    |input: &str| {
        logn!("Recognizing <OneOrMore> -- ");
        if input.starts_with("+"){
            log!("recognized");
            Some("+")
        } else {
            log!("not recognized");
            None
        }
    },
    // 17:OneOrMoreGreedy
    |input: &str| {
        logn!("Recognizing <OneOrMoreGreedy> -- ");
        if input.starts_with("+!"){
            log!("recognized");
            Some("+!")
        } else {
            log!("not recognized");
            None
        }
    },
    // 18:Optional
    |input: &str| {
        logn!("Recognizing <Optional> -- ");
        if input.starts_with("?"){
            log!("recognized");
            Some("?")
        } else {
            log!("not recognized");
            None
        }
    },
    // 19:OptionalGreedy
    |input: &str| {
        logn!("Recognizing <OptionalGreedy> -- ");
        if input.starts_with("?!"){
            log!("recognized");
            Some("?!")
        } else {
            log!("not recognized");
            None
        }
    },
    // 20:Equals
    |input: &str| {
        logn!("Recognizing <Equals> -- ");
        if input.starts_with("="){
            log!("recognized");
            Some("=")
        } else {
            log!("not recognized");
            None
        }
    },
    // 21:QEquals
    |input: &str| {
        logn!("Recognizing <QEquals> -- ");
        if input.starts_with("?="){
            log!("recognized");
            Some("?=")
        } else {
            log!("not recognized");
            None
        }
    },
    // 22:Left
    |input: &str| {
        logn!("Recognizing <Left> -- ");
        if input.starts_with("left"){
            log!("recognized");
            Some("left")
        } else {
            log!("not recognized");
            None
        }
    },
    // 23:Right
    |input: &str| {
        logn!("Recognizing <Right> -- ");
        if input.starts_with("right"){
            log!("recognized");
            Some("right")
        } else {
            log!("not recognized");
            None
        }
    },
    // 24:Reduce
    |input: &str| {
        logn!("Recognizing <Reduce> -- ");
        if input.starts_with("reduce"){
            log!("recognized");
            Some("reduce")
        } else {
            log!("not recognized");
            None
        }
    },
    // 25:Shift
    |input: &str| {
        logn!("Recognizing <Shift> -- ");
        if input.starts_with("shift"){
            log!("recognized");
            Some("shift")
        } else {
            log!("not recognized");
            None
        }
    },
    // 26:Dynamic
    |input: &str| {
        logn!("Recognizing <Dynamic> -- ");
        if input.starts_with("dynamic"){
            log!("recognized");
            Some("dynamic")
        } else {
            log!("not recognized");
            None
        }
    },
    // 27:NOPS
    |input: &str| {
        logn!("Recognizing <NOPS> -- ");
        if input.starts_with("nops"){
            log!("recognized");
            Some("nops")
        } else {
            log!("not recognized");
            None
        }
    },
    // 28:NOPSE
    |input: &str| {
        logn!("Recognizing <NOPSE> -- ");
        if input.starts_with("nopse"){
            log!("recognized");
            Some("nopse")
        } else {
            log!("not recognized");
            None
        }
    },
    // 29:Prefer
    |input: &str| {
        logn!("Recognizing <Prefer> -- ");
        if input.starts_with("prefer"){
            log!("recognized");
            Some("prefer")
        } else {
            log!("not recognized");
            None
        }
    },
    // 30:Finish
    |input: &str| {
        logn!("Recognizing <Finish> -- ");
        if input.starts_with("finish"){
            log!("recognized");
            Some("finish")
        } else {
            log!("not recognized");
            None
        }
    },
    // 31:NoFinish
    |input: &str| {
        logn!("Recognizing <NoFinish> -- ");
        if input.starts_with("nofinish"){
            log!("recognized");
            Some("nofinish")
        } else {
            log!("not recognized");
            None
        }
    },
    // 32:OComment
    |input: &str| {
        logn!("Recognizing <OComment> -- ");
        if input.starts_with("/*"){
            log!("recognized");
            Some("/*")
        } else {
            log!("not recognized");
            None
        }
    },
    // 33:CComment
    |input: &str| {
        logn!("Recognizing <CComment> -- ");
        if input.starts_with("*/"){
            log!("recognized");
            Some("*/")
        } else {
            log!("not recognized");
            None
        }
    },
    // 34:Name
    |input: &str| {
        logn!("Recognizing <Name> -- ");
        let regex = Regex::new(r#"[a-zA-Z_][a-zA-Z0-9_\.]*"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 35:RegexTerm
    |input: &str| {
        logn!("Recognizing <RegexTerm> -- ");
        let regex = Regex::new(r#"'\/(\\.|[^\/\\])*\/'"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 36:IntConst
    |input: &str| {
        logn!("Recognizing <IntConst> -- ");
        let regex = Regex::new(r#"\d+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 37:FloatConst
    |input: &str| {
        logn!("Recognizing <FloatConst> -- ");
        let regex = Regex::new(r#"[+-]?(\d+\.\d*|\.\d+)([eE][+-]?\d+)?(?<=[\w\.])(?![\w\.])"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 38:BoolConst
    |input: &str| {
        logn!("Recognizing <BoolConst> -- ");
        let regex = Regex::new(r#"true|false"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 39:StrConst
    |input: &str| {
        logn!("Recognizing <StrConst> -- ");
        let regex = Regex::new(r#"(?s)('[^'\\]*(?:\\.[^'\\]*)*')|("[^"\\]*(?:\\.[^"\\]*)*")"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 40:Action
    |input: &str| {
        logn!("Recognizing <Action> -- ");
        let regex = Regex::new(r#"@[a-zA-Z0-9_]+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 41:WS
    |input: &str| {
        logn!("Recognizing <WS> -- ");
        let regex = Regex::new(r#"\s+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 42:CommentLine
    |input: &str| {
        logn!("Recognizing <CommentLine> -- ");
        let regex = Regex::new(r#"\/\/.*"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 43:NotComment
    |input: &str| {
        logn!("Recognizing <NotComment> -- ");
        let regex = Regex::new(r#"((\*[^\/])|[^\s*\/]|\/[^\*])+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    ],
};

impl LexerDefinition for RustemoLexerDefinition {
    type Recognizer = for<'i> fn(&'i str) -> Option<&'i str>;

    fn recognizers(&self, state_index: StateIndex) -> RecognizerIterator<Self::Recognizer> {
            RecognizerIterator {
                terminals: &LEXER_DEFINITION.terminals,
                terminals_for_state: &LEXER_DEFINITION.terminals_for_state[state_index.0][..],
                recognizers: &LEXER_DEFINITION.recognizers,
                index: 0
            }
    }
}

pub struct RustemoLexer<'i>(DefaultLexer<'i, RustemoLexerDefinition>);

impl<'i> Lexer for RustemoLexer<'i> {
    type Input = &'i str;

    fn next_token(
        &self,
        context: &mut impl rustemo_rt::parser::Context<Self::Input>,
    ) -> Option<rustemo_rt::lexer::Token<Self::Input>> {
        self.0.next_token(context)
    }
}

// Enables creating a lexer from a reference to an object that can be converted
// to a string reference.
impl<'i, T> From<&'i T> for RustemoLexer<'i>
where
    T: AsRef<str> + ?Sized,
{
    fn from(input: &'i T) -> Self {
        Self(DefaultLexer::new(input.as_ref(), &LEXER_DEFINITION))
    }
}

pub struct RustemoBuilder<'i, I: 'i> {
    res_stack: Vec<Symbol>,
    phantom: PhantomData<&'i I>
}

impl<'i, I> Builder for RustemoBuilder<'i, I>
{
    type Output = Symbol;
    type Lexer = RustemoLexer<'i>;

    fn new() -> Self {
        RustemoBuilder {
            res_stack: vec![],
            phantom: PhantomData,
        }
    }

    fn shift_action(&mut self, term_idx: TermIndex, token: Token<<Self::Lexer as Lexer>::Input>) {
        let termval = match TermKind::try_from(term_idx.0).unwrap() {
            TermKind::STOP => Terminal::STOP,
            TermKind::Terminals => Terminal::Terminals,
            TermKind::Import => Terminal::Import,
            TermKind::As => Terminal::As,
            TermKind::Colon => Terminal::Colon,
            TermKind::SemiColon => Terminal::SemiColon,
            TermKind::Comma => Terminal::Comma,
            TermKind::OBrace => Terminal::OBrace,
            TermKind::CBrace => Terminal::CBrace,
            TermKind::OBracket => Terminal::OBracket,
            TermKind::CBracket => Terminal::CBracket,
            TermKind::OSBracket => Terminal::OSBracket,
            TermKind::CSBracket => Terminal::CSBracket,
            TermKind::Choice => Terminal::Choice,
            TermKind::ZeroOrMore => Terminal::ZeroOrMore,
            TermKind::ZeroOrMoreGreedy => Terminal::ZeroOrMoreGreedy,
            TermKind::OneOrMore => Terminal::OneOrMore,
            TermKind::OneOrMoreGreedy => Terminal::OneOrMoreGreedy,
            TermKind::Optional => Terminal::Optional,
            TermKind::OptionalGreedy => Terminal::OptionalGreedy,
            TermKind::Equals => Terminal::Equals,
            TermKind::QEquals => Terminal::QEquals,
            TermKind::Left => Terminal::Left,
            TermKind::Right => Terminal::Right,
            TermKind::Reduce => Terminal::Reduce,
            TermKind::Shift => Terminal::Shift,
            TermKind::Dynamic => Terminal::Dynamic,
            TermKind::NOPS => Terminal::NOPS,
            TermKind::NOPSE => Terminal::NOPSE,
            TermKind::Prefer => Terminal::Prefer,
            TermKind::Finish => Terminal::Finish,
            TermKind::NoFinish => Terminal::NoFinish,
            TermKind::OComment => Terminal::OComment,
            TermKind::CComment => Terminal::CComment,
            TermKind::Name => Terminal::Name(name(token)),
            TermKind::RegexTerm => Terminal::RegexTerm(regex_term(token)),
            TermKind::IntConst => Terminal::IntConst(int_const(token)),
            TermKind::FloatConst => Terminal::FloatConst(float_const(token)),
            TermKind::BoolConst => Terminal::BoolConst(bool_const(token)),
            TermKind::StrConst => Terminal::StrConst(str_const(token)),
            TermKind::Action => Terminal::Action(action(token)),
            TermKind::WS => Terminal::WS(ws(token)),
            TermKind::CommentLine => Terminal::CommentLine(comment_line(token)),
            TermKind::NotComment => Terminal::NotComment(not_comment(token)),
        };
        self.res_stack.push(Symbol::Terminal(termval));
    }
    
    fn reduce_action(&mut self, prod_kind: ProdIndex, prod_len: usize, _prod_str: &'static str) {
        let prod = match ProdKind::try_from(prod_kind.0).unwrap() {
            ProdKind::FileP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::GrammarRules(p0)) => NonTerminal::File(file_p0(p0))
                }
            },
            ProdKind::FileP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Imports(p0)), Symbol::NonTerminal(NonTerminal::GrammarRules(p1))) => NonTerminal::File(file_p1(p0, p1))
                }
            },
            ProdKind::FileP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarRules(p0)), _, Symbol::NonTerminal(NonTerminal::TerminalRules(p1))) => NonTerminal::File(file_p2(p0, p1))
                }
            },
            ProdKind::FileP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Imports(p0)), Symbol::NonTerminal(NonTerminal::GrammarRules(p1)), _, Symbol::NonTerminal(NonTerminal::TerminalRules(p2))) => NonTerminal::File(file_p3(p0, p1, p2))
                }
            },
            ProdKind::FileP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::TerminalRules(p0))) => NonTerminal::File(file_p4(p0))
                }
            },
            ProdKind::ImportsP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Imports(p0)), _) => NonTerminal::Imports(imports_p0(p0))
                }
            },
            ProdKind::ImportsP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::Imports(imports_p1())
                }
            },
            ProdKind::ImportP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::Terminal(Terminal::StrConst(p0))) => NonTerminal::Import(import_p0(p0))
                }
            },
            ProdKind::ImportP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::Terminal(Terminal::StrConst(p0)), _, Symbol::Terminal(Terminal::Name(p1))) => NonTerminal::Import(import_p1(p0, p1))
                }
            },
            ProdKind::GrammarRulesP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarRules(p0)), Symbol::NonTerminal(NonTerminal::GrammarRule(p1))) => NonTerminal::GrammarRules(grammar_rules_p0(p0, p1))
                }
            },
            ProdKind::GrammarRulesP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::GrammarRule(p0)) => NonTerminal::GrammarRules(grammar_rules_p1(p0))
                }
            },
            ProdKind::GrammarRuleP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-5).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Action(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p2)), _) => NonTerminal::GrammarRule(grammar_rule_p0(p0, p1, p2))
                }
            },
            ProdKind::GrammarRuleP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-8).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Action(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p2)), _, _, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p3)), _) => NonTerminal::GrammarRule(grammar_rule_p1(p0, p1, p2, p3))
                }
            },
            ProdKind::GrammarRuleRHSP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p0)), _, Symbol::NonTerminal(NonTerminal::Production(p1))) => NonTerminal::GrammarRuleRHS(grammar_rule_rhs_p0(p0, p1))
                }
            },
            ProdKind::GrammarRuleRHSP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Production(p0)) => NonTerminal::GrammarRuleRHS(grammar_rule_rhs_p1(p0))
                }
            },
            ProdKind::ProductionP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Assignments(p0)) => NonTerminal::Production(production_p0(p0))
                }
            },
            ProdKind::ProductionP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Assignments(p0)), _, Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p1)), _) => NonTerminal::Production(production_p1(p0, p1))
                }
            },
            ProdKind::TerminalRulesP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::TerminalRules(p0)), Symbol::NonTerminal(NonTerminal::TerminalRule(p1))) => NonTerminal::TerminalRules(terminal_rules_p0(p0, p1))
                }
            },
            ProdKind::TerminalRulesP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::TerminalRule(p0)) => NonTerminal::TerminalRules(terminal_rules_p1(p0))
                }
            },
            ProdKind::TerminalRuleP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-5).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Action(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::Recognizer(p2)), _) => NonTerminal::TerminalRule(terminal_rule_p0(p0, p1, p2))
                }
            },
            ProdKind::TerminalRuleP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Action(p0)), Symbol::Terminal(Terminal::Name(p1)), _, _) => NonTerminal::TerminalRule(terminal_rule_p1(p0, p1))
                }
            },
            ProdKind::TerminalRuleP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-8).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Action(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::Recognizer(p2)), _, Symbol::NonTerminal(NonTerminal::TermMetaDatas(p3)), _, _) => NonTerminal::TerminalRule(terminal_rule_p2(p0, p1, p2, p3))
                }
            },
            ProdKind::TerminalRuleP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-7).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Action(p0)), Symbol::Terminal(Terminal::Name(p1)), _, _, Symbol::NonTerminal(NonTerminal::TermMetaDatas(p2)), _, _) => NonTerminal::TerminalRule(terminal_rule_p3(p0, p1, p2))
                }
            },
            ProdKind::ProdMetaDataP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p0())
                }
            },
            ProdKind::ProdMetaDataP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p1())
                }
            },
            ProdKind::ProdMetaDataP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p2())
                }
            },
            ProdKind::ProdMetaDataP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p3())
                }
            },
            ProdKind::ProdMetaDataP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p4())
                }
            },
            ProdKind::ProdMetaDataP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p5())
                }
            },
            ProdKind::ProdMetaDataP6 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(prod_meta_data_p6())
                }
            },
            ProdKind::ProdMetaDataP7 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::IntConst(p0)) => NonTerminal::ProdMetaData(prod_meta_data_p7(p0))
                }
            },
            ProdKind::ProdMetaDataP8 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::UserMetaData(p0)) => NonTerminal::ProdMetaData(prod_meta_data_p8(p0))
                }
            },
            ProdKind::ProdMetaDatasP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p0)), _, Symbol::NonTerminal(NonTerminal::ProdMetaData(p1))) => NonTerminal::ProdMetaDatas(prod_meta_datas_p0(p0, p1))
                }
            },
            ProdKind::ProdMetaDatasP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::ProdMetaData(p0)) => NonTerminal::ProdMetaDatas(prod_meta_datas_p1(p0))
                }
            },
            ProdKind::TermMetaDataP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(term_meta_data_p0())
                }
            },
            ProdKind::TermMetaDataP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(term_meta_data_p1())
                }
            },
            ProdKind::TermMetaDataP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(term_meta_data_p2())
                }
            },
            ProdKind::TermMetaDataP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(term_meta_data_p3())
                }
            },
            ProdKind::TermMetaDataP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::IntConst(p0)) => NonTerminal::TermMetaData(term_meta_data_p4(p0))
                }
            },
            ProdKind::TermMetaDataP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::UserMetaData(p0)) => NonTerminal::TermMetaData(term_meta_data_p5(p0))
                }
            },
            ProdKind::TermMetaDatasP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::TermMetaDatas(p0)), _, Symbol::NonTerminal(NonTerminal::TermMetaData(p1))) => NonTerminal::TermMetaDatas(term_meta_datas_p0(p0, p1))
                }
            },
            ProdKind::TermMetaDatasP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::TermMetaData(p0)) => NonTerminal::TermMetaDatas(term_meta_datas_p1(p0))
                }
            },
            ProdKind::UserMetaDataP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Name(p0)), _, Symbol::NonTerminal(NonTerminal::Const(p1))) => NonTerminal::UserMetaData(user_meta_data_p0(p0, p1))
                }
            },
            ProdKind::ConstP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::IntConst(p0)) => NonTerminal::Const(const_p0(p0))
                }
            },
            ProdKind::ConstP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::FloatConst(p0)) => NonTerminal::Const(const_p1(p0))
                }
            },
            ProdKind::ConstP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::BoolConst(p0)) => NonTerminal::Const(const_p2(p0))
                }
            },
            ProdKind::ConstP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::StrConst(p0)) => NonTerminal::Const(const_p3(p0))
                }
            },
            ProdKind::AssignmentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::PlainAssignment(p0)) => NonTerminal::Assignment(assignment_p0(p0))
                }
            },
            ProdKind::AssignmentP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::BoolAssignment(p0)) => NonTerminal::Assignment(assignment_p1(p0))
                }
            },
            ProdKind::AssignmentP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::GSymbolReference(p0)) => NonTerminal::Assignment(assignment_p2(p0))
                }
            },
            ProdKind::AssignmentsP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Assignments(p0)), Symbol::NonTerminal(NonTerminal::Assignment(p1))) => NonTerminal::Assignments(assignments_p0(p0, p1))
                }
            },
            ProdKind::AssignmentsP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Assignment(p0)) => NonTerminal::Assignments(assignments_p1(p0))
                }
            },
            ProdKind::PlainAssignmentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Name(p0)), _, Symbol::NonTerminal(NonTerminal::GSymbolReference(p1))) => NonTerminal::PlainAssignment(plain_assignment_p0(p0, p1))
                }
            },
            ProdKind::BoolAssignmentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Name(p0)), _, Symbol::NonTerminal(NonTerminal::GSymbolReference(p1))) => NonTerminal::BoolAssignment(bool_assignment_p0(p0, p1))
                }
            },
            ProdKind::ProductionGroupP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p0)), _) => NonTerminal::ProductionGroup(production_group_p0(p0))
                }
            },
            ProdKind::GSymbolReferenceP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GSymbol(p0)), Symbol::NonTerminal(NonTerminal::RepetitionOperator(p1))) => NonTerminal::GSymbolReference(g_symbol_reference_p0(p0, p1))
                }
            },
            ProdKind::GSymbolReferenceP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ProductionGroup(p0)), Symbol::NonTerminal(NonTerminal::RepetitionOperator(p1))) => NonTerminal::GSymbolReference(g_symbol_reference_p1(p0, p1))
                }
            },
            ProdKind::RepetitionOperatorP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::RepetitionOperatorOp(p0)), Symbol::NonTerminal(NonTerminal::RepetitionModifiersExp(p1))) => NonTerminal::RepetitionOperator(repetition_operator_p0(p0, p1))
                }
            },
            ProdKind::RepetitionOperatorOpP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(repetition_operator_op_p0())
                }
            },
            ProdKind::RepetitionOperatorOpP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(repetition_operator_op_p1())
                }
            },
            ProdKind::RepetitionOperatorOpP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(repetition_operator_op_p2())
                }
            },
            ProdKind::RepetitionOperatorOpP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(repetition_operator_op_p3())
                }
            },
            ProdKind::RepetitionOperatorOpP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(repetition_operator_op_p4())
                }
            },
            ProdKind::RepetitionOperatorOpP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(repetition_operator_op_p5())
                }
            },
            ProdKind::RepetitionModifiersExpP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::RepetitionModifiers(p0)), _) => NonTerminal::RepetitionModifiersExp(repetition_modifiers_exp_p0(p0))
                }
            },
            ProdKind::RepetitionModifiersP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::RepetitionModifiers(p0)), _, Symbol::NonTerminal(NonTerminal::RepetitionModifier(p1))) => NonTerminal::RepetitionModifiers(repetition_modifiers_p0(p0, p1))
                }
            },
            ProdKind::RepetitionModifiersP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::RepetitionModifier(p0)) => NonTerminal::RepetitionModifiers(repetition_modifiers_p1(p0))
                }
            },
            ProdKind::RepetitionModifierP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::Name(p0)) => NonTerminal::RepetitionModifier(repetition_modifier_p0(p0))
                }
            },
            ProdKind::GSymbolP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::Name(p0)) => NonTerminal::GSymbol(g_symbol_p0(p0))
                }
            },
            ProdKind::GSymbolP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::StrConst(p0)) => NonTerminal::GSymbol(g_symbol_p1(p0))
                }
            },
            ProdKind::RecognizerP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::StrConst(p0)) => NonTerminal::Recognizer(recognizer_p0(p0))
                }
            },
            ProdKind::RecognizerP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::RegexTerm(p0)) => NonTerminal::Recognizer(recognizer_p1(p0))
                }
            },
            ProdKind::LayoutP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::LayoutItem(p0)) => NonTerminal::Layout(layout_p0(p0))
                }
            },
            ProdKind::LayoutP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Layout(p0)), Symbol::NonTerminal(NonTerminal::LayoutItem(p1))) => NonTerminal::Layout(layout_p1(p0, p1))
                }
            },
            ProdKind::LayoutP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::EMPTY(p0)) => NonTerminal::Layout(layout_p2(p0))
                }
            },
            ProdKind::LayoutItemP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::WS(p0)) => NonTerminal::LayoutItem(layout_item_p0(p0))
                }
            },
            ProdKind::LayoutItemP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Comment(p0)) => NonTerminal::LayoutItem(layout_item_p1(p0))
                }
            },
            ProdKind::CommentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::Corncs(p0)), _) => NonTerminal::Comment(comment_p0(p0))
                }
            },
            ProdKind::CommentP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::CommentLine(p0)) => NonTerminal::Comment(comment_p1(p0))
                }
            },
            ProdKind::CorncsP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Cornc(p0)) => NonTerminal::Corncs(corncs_p0(p0))
                }
            },
            ProdKind::CorncsP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Corncs(p0)), Symbol::NonTerminal(NonTerminal::Cornc(p1))) => NonTerminal::Corncs(corncs_p1(p0, p1))
                }
            },
            ProdKind::CorncsP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::EMPTY(p0)) => NonTerminal::Corncs(corncs_p2(p0))
                }
            },
            ProdKind::CorncP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Comment(p0)) => NonTerminal::Cornc(cornc_p0(p0))
                }
            },
            ProdKind::CorncP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::NotComment(p0)) => NonTerminal::Cornc(cornc_p1(p0))
                }
            },
            ProdKind::CorncP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::WS(p0)) => NonTerminal::Cornc(cornc_p2(p0))
                }
            },
        };
    }
}
