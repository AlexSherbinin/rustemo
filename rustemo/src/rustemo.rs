/// Generated by rustemo on 2022-08-01 16:44:46.548085137 +02:00

use regex::Regex;
use num_enum::TryFromPrimitive;
use std:: {
    convert::TryFrom,
    fmt::Debug,
};

use rustemo_rt::lexer::{Lexer, Token};
use rustemo_rt::parser::Parser;
use rustemo_rt::builder::Builder;
use rustemo_rt::error::RustemoResult;
use rustemo_rt::lr::lexer::{LRStringLexer, LRContext, LexerDefinition, RecognizerIterator};
use rustemo_rt::lr::builder::LRBuilder;
use rustemo_rt::lr::parser::{LRParser, ParserDefinition};
use rustemo_rt::lr::parser::Action::{self, Shift, Reduce, Accept, Error};
use rustemo_rt::index::{StateIndex, TermIndex, NonTermIndex, ProdIndex};
use rustemo_rt::grammar::{TerminalInfo, TerminalInfos, TerminalsState};
use rustemo_rt::debug::{log, logn};

use super::rustemo_actions;

const TERMINAL_NO: usize = 44;
const NONTERMINAL_NO: usize = 38;
const STATE_NO: usize = 120;
const MAX_ACTIONS: usize = 15;

#[derive(Debug, Copy, Clone, TryFromPrimitive)]
#[repr(usize)]
pub enum TermKind {
    STOP = 0,
    Terminals = 1,
    Import = 2,
    As = 3,
    Colon = 4,
    SemiColon = 5,
    Comma = 6,
    OBrace = 7,
    CBrace = 8,
    OBracket = 9,
    CBracket = 10,
    OSBracket = 11,
    CSBracket = 12,
    Choice = 13,
    ZeroOrMore = 14,
    ZeroOrMoreGreedy = 15,
    OneOrMore = 16,
    OneOrMoreGreedy = 17,
    Optional = 18,
    OptionalGreedy = 19,
    Equals = 20,
    QEquals = 21,
    Left = 22,
    Right = 23,
    Reduce = 24,
    Shift = 25,
    Dynamic = 26,
    NOPS = 27,
    NOPSE = 28,
    Prefer = 29,
    Finish = 30,
    NoFinish = 31,
    OComment = 32,
    CComment = 33,
    Name = 34,
    RegexTerm = 35,
    IntConst = 36,
    FloatConst = 37,
    BoolConst = 38,
    StrConst = 39,
    Action = 40,
    WS = 41,
    CommentLine = 42,
    NotComment = 43,
}

#[derive(Debug, Copy, Clone)]
pub enum NonTermKind {
    EMPTY = 0,
    AUG = 1,
    PGFile = 2,
    Imports = 3,
    ImportStm = 4,
    GrammarRules = 5,
    GrammarRule = 6,
    ActionOpt = 7,
    GrammarRuleRHS = 8,
    Production = 9,
    TerminalRules = 10,
    TerminalRule = 11,
    ProdMetaData = 12,
    ProdMetaDatas = 13,
    TermMetaData = 14,
    TermMetaDatas = 15,
    UserMetaData = 16,
    Const = 17,
    Assignment = 18,
    Assignments = 19,
    PlainAssignment = 20,
    BoolAssignment = 21,
    ProductionGroup = 22,
    GrammarSymbolRef = 23,
    RepetitionOperator = 24,
    RepetitionOperatorOpt = 25,
    RepetitionOperatorOp = 26,
    RepetitionModifiersExp = 27,
    RepetitionModifiersExpOpt = 28,
    RepetitionModifiers = 29,
    RepetitionModifier = 30,
    GrammarSymbol = 31,
    Recognizer = 32,
    Layout = 33,
    LayoutItem = 34,
    Comment = 35,
    Corncs = 36,
    Cornc = 37,
}

#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal)
}

#[derive(Debug)]
pub enum Terminal {
    STOP,
    Terminals,
    Import,
    As,
    Colon,
    SemiColon,
    Comma,
    OBrace,
    CBrace,
    OBracket,
    CBracket,
    OSBracket,
    CSBracket,
    Choice,
    ZeroOrMore,
    ZeroOrMoreGreedy,
    OneOrMore,
    OneOrMoreGreedy,
    Optional,
    OptionalGreedy,
    Equals,
    QEquals,
    Left,
    Right,
    Reduce,
    Shift,
    Dynamic,
    NOPS,
    NOPSE,
    Prefer,
    Finish,
    NoFinish,
    OComment,
    CComment,
    Name(rustemo_actions::Name),
    RegexTerm(rustemo_actions::RegexTerm),
    IntConst(rustemo_actions::IntConst),
    FloatConst(rustemo_actions::FloatConst),
    BoolConst(rustemo_actions::BoolConst),
    StrConst(rustemo_actions::StrConst),
    Action(rustemo_actions::Action),
    WS(rustemo_actions::WS),
    CommentLine(rustemo_actions::CommentLine),
    NotComment(rustemo_actions::NotComment),
}

#[derive(Debug)]
pub enum NonTerminal {
    PGFile(rustemo_actions::PGFile),
    Imports(rustemo_actions::Imports),
    ImportStm(rustemo_actions::ImportStm),
    GrammarRules(rustemo_actions::GrammarRules),
    GrammarRule(rustemo_actions::GrammarRule),
    ActionOpt(rustemo_actions::ActionOpt),
    GrammarRuleRHS(rustemo_actions::GrammarRuleRHS),
    Production(rustemo_actions::Production),
    TerminalRules(rustemo_actions::TerminalRules),
    TerminalRule(rustemo_actions::TerminalRule),
    ProdMetaData(rustemo_actions::ProdMetaData),
    ProdMetaDatas(rustemo_actions::ProdMetaDatas),
    TermMetaData(rustemo_actions::TermMetaData),
    TermMetaDatas(rustemo_actions::TermMetaDatas),
    UserMetaData(rustemo_actions::UserMetaData),
    Const(rustemo_actions::Const),
    Assignment(rustemo_actions::Assignment),
    Assignments(rustemo_actions::Assignments),
    PlainAssignment(rustemo_actions::PlainAssignment),
    BoolAssignment(rustemo_actions::BoolAssignment),
    ProductionGroup(rustemo_actions::ProductionGroup),
    GrammarSymbolRef(rustemo_actions::GrammarSymbolRef),
    RepetitionOperator(rustemo_actions::RepetitionOperator),
    RepetitionOperatorOpt(rustemo_actions::RepetitionOperatorOpt),
    RepetitionOperatorOp(rustemo_actions::RepetitionOperatorOp),
    RepetitionModifiersExp(rustemo_actions::RepetitionModifiersExp),
    RepetitionModifiersExpOpt(rustemo_actions::RepetitionModifiersExpOpt),
    RepetitionModifiers(rustemo_actions::RepetitionModifiers),
    RepetitionModifier(rustemo_actions::RepetitionModifier),
    GrammarSymbol(rustemo_actions::GrammarSymbol),
    Recognizer(rustemo_actions::Recognizer),
    Layout(rustemo_actions::Layout),
    LayoutItem(rustemo_actions::LayoutItem),
    Comment(rustemo_actions::Comment),
    Corncs(rustemo_actions::Corncs),
    Cornc(rustemo_actions::Cornc),
}

#[derive(Copy, Clone, TryFromPrimitive)]
#[repr(usize)]
pub enum ProdKind {
    PGFileP0 = 1,
    PGFileP1 = 2,
    PGFileP2 = 3,
    PGFileP3 = 4,
    PGFileP4 = 5,
    ImportsP0 = 6,
    ImportsP1 = 7,
    ImportStmP0 = 8,
    ImportStmP1 = 9,
    GrammarRulesP0 = 10,
    GrammarRulesP1 = 11,
    GrammarRuleP0 = 12,
    GrammarRuleP1 = 13,
    ActionOptP0 = 14,
    ActionOptP1 = 15,
    GrammarRuleRHSP0 = 16,
    GrammarRuleRHSP1 = 17,
    ProductionP0 = 18,
    ProductionP1 = 19,
    TerminalRulesP0 = 20,
    TerminalRulesP1 = 21,
    TerminalRuleP0 = 22,
    TerminalRuleP1 = 23,
    TerminalRuleP2 = 24,
    TerminalRuleP3 = 25,
    ProdMetaDataP0 = 26,
    ProdMetaDataP1 = 27,
    ProdMetaDataP2 = 28,
    ProdMetaDataP3 = 29,
    ProdMetaDataP4 = 30,
    ProdMetaDataP5 = 31,
    ProdMetaDataP6 = 32,
    ProdMetaDataP7 = 33,
    ProdMetaDataP8 = 34,
    ProdMetaDatasP0 = 35,
    ProdMetaDatasP1 = 36,
    TermMetaDataP0 = 37,
    TermMetaDataP1 = 38,
    TermMetaDataP2 = 39,
    TermMetaDataP3 = 40,
    TermMetaDataP4 = 41,
    TermMetaDataP5 = 42,
    TermMetaDatasP0 = 43,
    TermMetaDatasP1 = 44,
    UserMetaDataP0 = 45,
    ConstP0 = 46,
    ConstP1 = 47,
    ConstP2 = 48,
    ConstP3 = 49,
    AssignmentP0 = 50,
    AssignmentP1 = 51,
    AssignmentP2 = 52,
    AssignmentsP0 = 53,
    AssignmentsP1 = 54,
    PlainAssignmentP0 = 55,
    BoolAssignmentP0 = 56,
    ProductionGroupP0 = 57,
    GrammarSymbolRefP0 = 58,
    GrammarSymbolRefP1 = 59,
    RepetitionOperatorP0 = 60,
    RepetitionOperatorOptP0 = 61,
    RepetitionOperatorOptP1 = 62,
    RepetitionOperatorOpP0 = 63,
    RepetitionOperatorOpP1 = 64,
    RepetitionOperatorOpP2 = 65,
    RepetitionOperatorOpP3 = 66,
    RepetitionOperatorOpP4 = 67,
    RepetitionOperatorOpP5 = 68,
    RepetitionModifiersExpP0 = 69,
    RepetitionModifiersExpOptP0 = 70,
    RepetitionModifiersExpOptP1 = 71,
    RepetitionModifiersP0 = 72,
    RepetitionModifiersP1 = 73,
    RepetitionModifierP0 = 74,
    GrammarSymbolP0 = 75,
    GrammarSymbolP1 = 76,
    RecognizerP0 = 77,
    RecognizerP1 = 78,
    LayoutP0 = 79,
    LayoutP1 = 80,
    LayoutP2 = 81,
    LayoutItemP0 = 82,
    LayoutItemP1 = 83,
    CommentP0 = 84,
    CommentP1 = 85,
    CorncsP0 = 86,
    CorncsP1 = 87,
    CorncsP2 = 88,
    CorncP0 = 89,
    CorncP1 = 90,
    CorncP2 = 91,
}

pub struct RustemoParserDefinition {
    actions: [[Action; TERMINAL_NO]; STATE_NO],
    gotos: [[Option<StateIndex>; NONTERMINAL_NO]; STATE_NO]
}

pub(in crate) static PARSER_DEFINITION: RustemoParserDefinition = RustemoParserDefinition {
    actions: [
    // State 0:AUG
    [Error, Shift(StateIndex(1), TermIndex(1)), Shift(StateIndex(2), TermIndex(2)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 1:Terminals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 2:Import
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(13), TermIndex(39)), Error, Error, Error, Error],
    // State 3:Action
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(14), 1, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 4:PGFile
    [Accept, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 5:Imports
    [Error, Error, Shift(StateIndex(2), TermIndex(2)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 6:ImportStm
    [Error, Error, Reduce(ProdIndex(7), 1, NonTermIndex(3), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(7), 1, NonTermIndex(3), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(7), 1, NonTermIndex(3), "<?>"), Error, Error, Error],
    // State 7:GrammarRules
    [Reduce(ProdIndex(1), 1, NonTermIndex(2), "<?>"), Shift(StateIndex(16), TermIndex(1)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 8:GrammarRule
    [Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(11), 1, NonTermIndex(5), "<?>"), Error, Error, Error],
    // State 9:ActionOpt
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(18), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 10:ActionOpt
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(19), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 11:TerminalRules
    [Reduce(ProdIndex(5), 2, NonTermIndex(2), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 12:TerminalRule
    [Reduce(ProdIndex(21), 1, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(21), 1, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(21), 1, NonTermIndex(10), "<?>"), Error, Error, Error],
    // State 13:StrConst
    [Error, Error, Reduce(ProdIndex(8), 2, NonTermIndex(4), "<?>"), Shift(StateIndex(21), TermIndex(3)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(8), 2, NonTermIndex(4), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(8), 2, NonTermIndex(4), "<?>"), Error, Error, Error],
    // State 14:ImportStm
    [Error, Error, Reduce(ProdIndex(6), 2, NonTermIndex(3), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(6), 2, NonTermIndex(3), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(6), 2, NonTermIndex(3), "<?>"), Error, Error, Error],
    // State 15:GrammarRules
    [Reduce(ProdIndex(2), 2, NonTermIndex(2), "<?>"), Shift(StateIndex(22), TermIndex(1)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 16:Terminals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 17:GrammarRule
    [Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(10), 2, NonTermIndex(5), "<?>"), Error, Error, Error],
    // State 18:Name
    [Error, Error, Error, Error, Shift(StateIndex(24), TermIndex(4)), Error, Error, Shift(StateIndex(25), TermIndex(7)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 19:Name
    [Error, Error, Error, Error, Shift(StateIndex(26), TermIndex(4)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 20:TerminalRule
    [Reduce(ProdIndex(20), 2, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(20), 2, NonTermIndex(10), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(20), 2, NonTermIndex(10), "<?>"), Error, Error, Error],
    // State 21:As
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(27), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 22:Terminals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 23:TerminalRules
    [Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 24:Colon
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(29), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(30), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 25:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(41), TermIndex(22)), Shift(StateIndex(42), TermIndex(23)), Shift(StateIndex(43), TermIndex(24)), Shift(StateIndex(44), TermIndex(25)), Shift(StateIndex(45), TermIndex(26)), Shift(StateIndex(46), TermIndex(27)), Shift(StateIndex(47), TermIndex(28)), Error, Error, Error, Error, Error, Shift(StateIndex(48), TermIndex(34)), Error, Shift(StateIndex(49), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 26:Colon
    [Error, Error, Error, Error, Error, Shift(StateIndex(53), TermIndex(5)), Error, Shift(StateIndex(54), TermIndex(7)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(55), TermIndex(35)), Error, Error, Error, Shift(StateIndex(56), TermIndex(39)), Error, Error, Error, Error],
    // State 27:Name
    [Error, Error, Reduce(ProdIndex(9), 4, NonTermIndex(4), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(9), 4, NonTermIndex(4), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(9), 4, NonTermIndex(4), "<?>"), Error, Error, Error],
    // State 28:TerminalRules
    [Reduce(ProdIndex(4), 4, NonTermIndex(2), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(15), 0, NonTermIndex(7), "<?>"), Error, Error, Error, Error, Error, Shift(StateIndex(3), TermIndex(40)), Error, Error, Error],
    // State 29:OBracket
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(29), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(30), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 30:Name
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Shift(StateIndex(59), TermIndex(20)), Shift(StateIndex(60), TermIndex(21)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error],
    // State 31:StrConst
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Error, Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Error, Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Error, Error, Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(76), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error],
    // State 32:GrammarRuleRHS
    [Error, Error, Error, Error, Error, Shift(StateIndex(61), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(62), TermIndex(13)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 33:Production
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(17), 1, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(17), 1, NonTermIndex(8), "<?>"), Error, Error, Reduce(ProdIndex(17), 1, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 34:Assignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Error, Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Error, Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Error, Error, Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(54), 1, NonTermIndex(19), "<?>"), Error, Error, Error, Error],
    // State 35:Assignments
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(18), 1, NonTermIndex(9), "<?>"), Error, Shift(StateIndex(63), TermIndex(7)), Error, Shift(StateIndex(29), TermIndex(9)), Reduce(ProdIndex(18), 1, NonTermIndex(9), "<?>"), Error, Error, Reduce(ProdIndex(18), 1, NonTermIndex(9), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(30), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 36:PlainAssignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(50), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error],
    // State 37:BoolAssignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Error, Error, Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(51), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error],
    // State 38:ProductionGroup
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Shift(StateIndex(65), TermIndex(14)), Shift(StateIndex(66), TermIndex(15)), Shift(StateIndex(67), TermIndex(16)), Shift(StateIndex(68), TermIndex(17)), Shift(StateIndex(69), TermIndex(18)), Shift(StateIndex(70), TermIndex(19)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Error, Error, Error],
    // State 39:GrammarSymbolRef
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(52), 1, NonTermIndex(18), "<?>"), Error, Error, Error, Error],
    // State 40:GrammarSymbol
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Shift(StateIndex(65), TermIndex(14)), Shift(StateIndex(66), TermIndex(15)), Shift(StateIndex(67), TermIndex(16)), Shift(StateIndex(68), TermIndex(17)), Shift(StateIndex(69), TermIndex(18)), Shift(StateIndex(70), TermIndex(19)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(62), 0, NonTermIndex(25), "<?>"), Error, Error, Error, Error],
    // State 41:Left
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(26), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(26), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 42:Right
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(28), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(28), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 43:Reduce
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(27), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(27), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 44:Shift
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(29), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(29), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 45:Dynamic
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(30), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(30), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 46:NOPS
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(31), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(31), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 47:NOPSE
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(32), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(32), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 48:Name
    [Error, Error, Error, Error, Shift(StateIndex(75), TermIndex(4)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 49:IntConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(33), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(33), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 50:ProdMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(36), 1, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(36), 1, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 51:ProdMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(76), TermIndex(6)), Error, Shift(StateIndex(77), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 52:UserMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(34), 1, NonTermIndex(12), "<?>"), Error, Reduce(ProdIndex(34), 1, NonTermIndex(12), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 53:SemiColon
    [Reduce(ProdIndex(23), 4, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(23), 4, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(23), 4, NonTermIndex(11), "<?>"), Error, Error, Error],
    // State 54:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(78), TermIndex(26)), Error, Error, Shift(StateIndex(79), TermIndex(29)), Shift(StateIndex(80), TermIndex(30)), Shift(StateIndex(81), TermIndex(31)), Error, Error, Shift(StateIndex(48), TermIndex(34)), Error, Shift(StateIndex(82), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 55:RegexTerm
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(78), 1, NonTermIndex(32), "<?>"), Error, Reduce(ProdIndex(78), 1, NonTermIndex(32), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 56:StrConst
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(77), 1, NonTermIndex(32), "<?>"), Error, Reduce(ProdIndex(77), 1, NonTermIndex(32), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 57:Recognizer
    [Error, Error, Error, Error, Error, Shift(StateIndex(86), TermIndex(5)), Error, Shift(StateIndex(87), TermIndex(7)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 58:GrammarRuleRHS
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(88), TermIndex(10)), Error, Error, Shift(StateIndex(62), TermIndex(13)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 59:Equals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(29), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(89), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 60:QEquals
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(29), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(89), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 61:SemiColon
    [Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(12), 5, NonTermIndex(6), "<?>"), Error, Error, Error],
    // State 62:Choice
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(29), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(30), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 63:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(41), TermIndex(22)), Shift(StateIndex(42), TermIndex(23)), Shift(StateIndex(43), TermIndex(24)), Shift(StateIndex(44), TermIndex(25)), Shift(StateIndex(45), TermIndex(26)), Shift(StateIndex(46), TermIndex(27)), Shift(StateIndex(47), TermIndex(28)), Error, Error, Error, Error, Error, Shift(StateIndex(48), TermIndex(34)), Error, Shift(StateIndex(49), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 64:Assignment
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Error, Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Error, Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Error, Error, Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(53), 2, NonTermIndex(19), "<?>"), Error, Error, Error, Error],
    // State 65:ZeroOrMore
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(63), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error],
    // State 66:ZeroOrMoreGreedy
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(64), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error],
    // State 67:OneOrMore
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(65), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error],
    // State 68:OneOrMoreGreedy
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(66), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error],
    // State 69:Optional
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(67), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error],
    // State 70:OptionalGreedy
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Error, Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(68), 1, NonTermIndex(26), "<?>"), Error, Error, Error, Error],
    // State 71:RepetitionOperator
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Error, Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Error, Error, Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(61), 1, NonTermIndex(25), "<?>"), Error, Error, Error, Error],
    // State 72:RepetitionOperatorOpt
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Error, Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Error, Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Error, Error, Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(59), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error],
    // State 73:RepetitionOperatorOp
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Error, Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Error, Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Shift(StateIndex(94), TermIndex(11)), Error, Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(71), 0, NonTermIndex(28), "<?>"), Error, Error, Error, Error],
    // State 74:RepetitionOperatorOpt
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(58), 2, NonTermIndex(23), "<?>"), Error, Error, Error, Error],
    // State 75:Colon
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(97), TermIndex(36)), Shift(StateIndex(98), TermIndex(37)), Shift(StateIndex(99), TermIndex(38)), Shift(StateIndex(100), TermIndex(39)), Error, Error, Error, Error],
    // State 76:Comma
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(41), TermIndex(22)), Shift(StateIndex(42), TermIndex(23)), Shift(StateIndex(43), TermIndex(24)), Shift(StateIndex(44), TermIndex(25)), Shift(StateIndex(45), TermIndex(26)), Shift(StateIndex(46), TermIndex(27)), Shift(StateIndex(47), TermIndex(28)), Error, Error, Error, Error, Error, Shift(StateIndex(48), TermIndex(34)), Error, Shift(StateIndex(49), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 77:CBrace
    [Error, Error, Error, Error, Shift(StateIndex(103), TermIndex(4)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 78:Dynamic
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(40), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(40), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 79:Prefer
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(37), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(37), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 80:Finish
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(38), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(38), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 81:NoFinish
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(39), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(39), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 82:IntConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(41), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(41), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 83:TermMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(44), 1, NonTermIndex(15), "<?>"), Error, Reduce(ProdIndex(44), 1, NonTermIndex(15), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 84:TermMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(104), TermIndex(6)), Error, Shift(StateIndex(105), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 85:UserMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(42), 1, NonTermIndex(14), "<?>"), Error, Reduce(ProdIndex(42), 1, NonTermIndex(14), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 86:SemiColon
    [Reduce(ProdIndex(22), 5, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(22), 5, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(22), 5, NonTermIndex(11), "<?>"), Error, Error, Error],
    // State 87:OBrace
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(78), TermIndex(26)), Error, Error, Shift(StateIndex(79), TermIndex(29)), Shift(StateIndex(80), TermIndex(30)), Shift(StateIndex(81), TermIndex(31)), Error, Error, Shift(StateIndex(48), TermIndex(34)), Error, Shift(StateIndex(82), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 88:CBracket
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Error, Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Error, Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Error, Error, Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(57), 3, NonTermIndex(22), "<?>"), Error, Error, Error, Error],
    // State 89:Name
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(75), 1, NonTermIndex(31), "<?>"), Error, Error, Error, Error],
    // State 90:GrammarSymbolRef
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Error, Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Error, Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Error, Error, Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(55), 3, NonTermIndex(20), "<?>"), Error, Error, Error, Error],
    // State 91:GrammarSymbolRef
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Error, Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Error, Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Error, Error, Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(56), 3, NonTermIndex(21), "<?>"), Error, Error, Error, Error],
    // State 92:Production
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(16), 3, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(16), 3, NonTermIndex(8), "<?>"), Error, Error, Reduce(ProdIndex(16), 3, NonTermIndex(8), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 93:ProdMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(76), TermIndex(6)), Error, Shift(StateIndex(107), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 94:OSBracket
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(108), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 95:RepetitionModifiersExp
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(70), 1, NonTermIndex(28), "<?>"), Error, Error, Error, Error],
    // State 96:RepetitionModifiersExpOpt
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Error, Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Error, Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Error, Error, Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(60), 2, NonTermIndex(24), "<?>"), Error, Error, Error, Error],
    // State 97:IntConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(46), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(46), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 98:FloatConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(47), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(47), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 99:BoolConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(48), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 100:StrConst
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Reduce(ProdIndex(49), 1, NonTermIndex(17), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 101:Const
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(45), 3, NonTermIndex(16), "<?>"), Error, Reduce(ProdIndex(45), 3, NonTermIndex(16), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 102:ProdMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(35), 3, NonTermIndex(13), "<?>"), Error, Reduce(ProdIndex(35), 3, NonTermIndex(13), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 103:Colon
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(29), TermIndex(9)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(30), TermIndex(34)), Error, Error, Error, Error, Shift(StateIndex(31), TermIndex(39)), Error, Error, Error, Error],
    // State 104:Comma
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(78), TermIndex(26)), Error, Error, Shift(StateIndex(79), TermIndex(29)), Shift(StateIndex(80), TermIndex(30)), Shift(StateIndex(81), TermIndex(31)), Error, Error, Shift(StateIndex(48), TermIndex(34)), Error, Shift(StateIndex(82), TermIndex(36)), Error, Error, Error, Error, Error, Error, Error],
    // State 105:CBrace
    [Error, Error, Error, Error, Error, Shift(StateIndex(113), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 106:TermMetaDatas
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(104), TermIndex(6)), Error, Shift(StateIndex(114), TermIndex(8)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 107:CBrace
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(19), 4, NonTermIndex(9), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(19), 4, NonTermIndex(9), "<?>"), Error, Error, Reduce(ProdIndex(19), 4, NonTermIndex(9), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 108:Name
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(74), 1, NonTermIndex(30), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(74), 1, NonTermIndex(30), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 109:RepetitionModifiers
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(115), TermIndex(6)), Error, Error, Error, Error, Error, Shift(StateIndex(116), TermIndex(12)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 110:RepetitionModifier
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(73), 1, NonTermIndex(29), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(73), 1, NonTermIndex(29), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 111:GrammarRuleRHS
    [Error, Error, Error, Error, Error, Shift(StateIndex(117), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(62), TermIndex(13)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 112:TermMetaData
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(43), 3, NonTermIndex(15), "<?>"), Error, Reduce(ProdIndex(43), 3, NonTermIndex(15), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 113:SemiColon
    [Reduce(ProdIndex(25), 7, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(25), 7, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(25), 7, NonTermIndex(11), "<?>"), Error, Error, Error],
    // State 114:CBrace
    [Error, Error, Error, Error, Error, Shift(StateIndex(118), TermIndex(5)), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 115:Comma
    [Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Shift(StateIndex(108), TermIndex(34)), Error, Error, Error, Error, Error, Error, Error, Error, Error],
    // State 116:CSBracket
    [Error, Error, Error, Error, Error, Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Error, Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Error, Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Error, Error, Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Error, Error, Error, Error, Reduce(ProdIndex(69), 3, NonTermIndex(27), "<?>"), Error, Error, Error, Error],
    // State 117:SemiColon
    [Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(13), 8, NonTermIndex(6), "<?>"), Error, Error, Error],
    // State 118:SemiColon
    [Reduce(ProdIndex(24), 8, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(24), 8, NonTermIndex(11), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(24), 8, NonTermIndex(11), "<?>"), Error, Error, Error],
    // State 119:RepetitionModifier
    [Error, Error, Error, Error, Error, Error, Reduce(ProdIndex(72), 3, NonTermIndex(29), "<?>"), Error, Error, Error, Error, Error, Reduce(ProdIndex(72), 3, NonTermIndex(29), "<?>"), Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error, Error],
],
    gotos: [
    // State 0:AUG
    [None, None, Some(StateIndex(4)), Some(StateIndex(5)), Some(StateIndex(6)), Some(StateIndex(7)), Some(StateIndex(8)), Some(StateIndex(9)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 1:Terminals
    [None, None, None, None, None, None, None, Some(StateIndex(10)), None, None, Some(StateIndex(11)), Some(StateIndex(12)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 2:Import
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 3:Action
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 4:PGFile
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 5:Imports
    [None, None, None, None, Some(StateIndex(14)), Some(StateIndex(15)), Some(StateIndex(8)), Some(StateIndex(9)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 6:ImportStm
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 7:GrammarRules
    [None, None, None, None, None, None, Some(StateIndex(17)), Some(StateIndex(9)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 8:GrammarRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 9:ActionOpt
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 10:ActionOpt
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 11:TerminalRules
    [None, None, None, None, None, None, None, Some(StateIndex(10)), None, None, None, Some(StateIndex(20)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 12:TerminalRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 13:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 14:ImportStm
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 15:GrammarRules
    [None, None, None, None, None, None, Some(StateIndex(17)), Some(StateIndex(9)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 16:Terminals
    [None, None, None, None, None, None, None, Some(StateIndex(10)), None, None, Some(StateIndex(23)), Some(StateIndex(12)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 17:GrammarRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 18:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 19:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 20:TerminalRule
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 21:As
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 22:Terminals
    [None, None, None, None, None, None, None, Some(StateIndex(10)), None, None, Some(StateIndex(28)), Some(StateIndex(12)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 23:TerminalRules
    [None, None, None, None, None, None, None, Some(StateIndex(10)), None, None, None, Some(StateIndex(20)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 24:Colon
    [None, None, None, None, None, None, None, None, Some(StateIndex(32)), Some(StateIndex(33)), None, None, None, None, None, None, None, None, Some(StateIndex(34)), Some(StateIndex(35)), Some(StateIndex(36)), Some(StateIndex(37)), Some(StateIndex(38)), Some(StateIndex(39)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 25:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(50)), Some(StateIndex(51)), None, None, Some(StateIndex(52)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 26:Colon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(57)), None, None, None, None, None],
    // State 27:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 28:TerminalRules
    [None, None, None, None, None, None, None, Some(StateIndex(10)), None, None, None, Some(StateIndex(20)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 29:OBracket
    [None, None, None, None, None, None, None, None, Some(StateIndex(58)), Some(StateIndex(33)), None, None, None, None, None, None, None, None, Some(StateIndex(34)), Some(StateIndex(35)), Some(StateIndex(36)), Some(StateIndex(37)), Some(StateIndex(38)), Some(StateIndex(39)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 30:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 31:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 32:GrammarRuleRHS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 33:Production
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 34:Assignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 35:Assignments
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(64)), None, Some(StateIndex(36)), Some(StateIndex(37)), Some(StateIndex(38)), Some(StateIndex(39)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 36:PlainAssignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 37:BoolAssignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 38:ProductionGroup
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(71)), Some(StateIndex(72)), Some(StateIndex(73)), None, None, None, None, None, None, None, None, None, None, None],
    // State 39:GrammarSymbolRef
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 40:GrammarSymbol
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(71)), Some(StateIndex(74)), Some(StateIndex(73)), None, None, None, None, None, None, None, None, None, None, None],
    // State 41:Left
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 42:Right
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 43:Reduce
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 44:Shift
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 45:Dynamic
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 46:NOPS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 47:NOPSE
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 48:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 49:IntConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 50:ProdMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 51:ProdMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 52:UserMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 53:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 54:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(83)), Some(StateIndex(84)), Some(StateIndex(85)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 55:RegexTerm
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 56:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 57:Recognizer
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 58:GrammarRuleRHS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 59:Equals
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(38)), Some(StateIndex(90)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 60:QEquals
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(38)), Some(StateIndex(91)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 61:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 62:Choice
    [None, None, None, None, None, None, None, None, None, Some(StateIndex(92)), None, None, None, None, None, None, None, None, Some(StateIndex(34)), Some(StateIndex(35)), Some(StateIndex(36)), Some(StateIndex(37)), Some(StateIndex(38)), Some(StateIndex(39)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 63:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(50)), Some(StateIndex(93)), None, None, Some(StateIndex(52)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 64:Assignment
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 65:ZeroOrMore
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 66:ZeroOrMoreGreedy
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 67:OneOrMore
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 68:OneOrMoreGreedy
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 69:Optional
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 70:OptionalGreedy
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 71:RepetitionOperator
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 72:RepetitionOperatorOpt
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 73:RepetitionOperatorOp
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(95)), Some(StateIndex(96)), None, None, None, None, None, None, None, None, None],
    // State 74:RepetitionOperatorOpt
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 75:Colon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(101)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 76:Comma
    [None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(102)), None, None, None, Some(StateIndex(52)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 77:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 78:Dynamic
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 79:Prefer
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 80:Finish
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 81:NoFinish
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 82:IntConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 83:TermMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 84:TermMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 85:UserMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 86:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 87:OBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(83)), Some(StateIndex(106)), Some(StateIndex(85)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 88:CBracket
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 89:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 90:GrammarSymbolRef
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 91:GrammarSymbolRef
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 92:Production
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 93:ProdMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 94:OSBracket
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(109)), Some(StateIndex(110)), None, None, None, None, None, None, None],
    // State 95:RepetitionModifiersExp
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 96:RepetitionModifiersExpOpt
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 97:IntConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 98:FloatConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 99:BoolConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 100:StrConst
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 101:Const
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 102:ProdMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 103:Colon
    [None, None, None, None, None, None, None, None, Some(StateIndex(111)), Some(StateIndex(33)), None, None, None, None, None, None, None, None, Some(StateIndex(34)), Some(StateIndex(35)), Some(StateIndex(36)), Some(StateIndex(37)), Some(StateIndex(38)), Some(StateIndex(39)), None, None, None, None, None, None, None, Some(StateIndex(40)), None, None, None, None, None, None],
    // State 104:Comma
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(112)), None, Some(StateIndex(85)), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 105:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 106:TermMetaDatas
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 107:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 108:Name
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 109:RepetitionModifiers
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 110:RepetitionModifier
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 111:GrammarRuleRHS
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 112:TermMetaData
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 113:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 114:CBrace
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 115:Comma
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(StateIndex(119)), None, None, None, None, None, None, None],
    // State 116:CSBracket
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 117:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 118:SemiColon
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 119:RepetitionModifier
    [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
]};

impl ParserDefinition for RustemoParserDefinition {
    fn action(&self, state_index: StateIndex, term_index: TermIndex) -> Action {
        PARSER_DEFINITION.actions[state_index.0][term_index.0]
    }
    fn goto(&self, state_index: StateIndex, nonterm_index: NonTermIndex) -> StateIndex {
        PARSER_DEFINITION.gotos[state_index.0][nonterm_index.0].unwrap()
    }
}

pub struct RustemoParser(LRParser<RustemoParserDefinition>);

impl<I, L, B> Parser<I, LRContext<I>, L, B> for RustemoParser
where
    I: Debug,
    L: Lexer<I, LRContext<I>>,
    B: LRBuilder<I>,
{
    fn parse(&mut self, context: LRContext<I>, lexer: L, mut builder: B) -> RustemoResult<B::Output> {
        RustemoParser::default().0.parse(context, lexer, builder)
    }
}

impl RustemoParser
{
    pub fn parse_str<'i>(input: &'i str) -> RustemoResult<<RustemoBuilder as Builder>::Output> {
        let context = LRContext::new("<str>".to_string(), input);
        let lexer = LRStringLexer::new(&LEXER_DEFINITION);
        let builder = RustemoBuilder::new();
        RustemoParser::default().0.parse(context, lexer, builder)
    }
}

impl Default for RustemoParser {
    fn default() -> Self {
        Self(LRParser::new(&PARSER_DEFINITION))
    }
}

pub struct RustemoLexerDefinition {
    terminals: TerminalInfos<TERMINAL_NO>,
    terminals_for_state: TerminalsState<MAX_ACTIONS, STATE_NO>,
    recognizers: [fn(&str) -> Option<&str>; TERMINAL_NO]
}

pub(in crate) static LEXER_DEFINITION: RustemoLexerDefinition = RustemoLexerDefinition {
    terminals: [
    TerminalInfo {
        id: TermIndex(0),
        name: "STOP",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(1),
        name: "Terminals",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(2),
        name: "Import",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(3),
        name: "As",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(4),
        name: "Colon",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(5),
        name: "SemiColon",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(6),
        name: "Comma",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(7),
        name: "OBrace",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(8),
        name: "CBrace",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(9),
        name: "OBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(10),
        name: "CBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(11),
        name: "OSBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(12),
        name: "CSBracket",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(13),
        name: "Choice",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(14),
        name: "ZeroOrMore",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(15),
        name: "ZeroOrMoreGreedy",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(16),
        name: "OneOrMore",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(17),
        name: "OneOrMoreGreedy",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(18),
        name: "Optional",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(19),
        name: "OptionalGreedy",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(20),
        name: "Equals",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(21),
        name: "QEquals",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(22),
        name: "Left",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(23),
        name: "Right",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(24),
        name: "Reduce",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(25),
        name: "Shift",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(26),
        name: "Dynamic",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(27),
        name: "NOPS",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(28),
        name: "NOPSE",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(29),
        name: "Prefer",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(30),
        name: "Finish",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(31),
        name: "NoFinish",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(32),
        name: "OComment",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(33),
        name: "CComment",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(34),
        name: "Name",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(35),
        name: "RegexTerm",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(36),
        name: "IntConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(37),
        name: "FloatConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(38),
        name: "BoolConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(39),
        name: "StrConst",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(40),
        name: "Action",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(41),
        name: "WS",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(42),
        name: "CommentLine",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(43),
        name: "NotComment",
        location: None,
    },
],
    // Expected terminals/tokens indexed by state id.
    // Sorted by priority.
    terminals_for_state: [
    // State 0:AUG
    [Some(1), Some(2), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 1:Terminals
    [Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 2:Import
    [Some(39), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 3:Action
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 4:PGFile
    [Some(0), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 5:Imports
    [Some(2), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 6:ImportStm
    [Some(2), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 7:GrammarRules
    [Some(0), Some(1), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 8:GrammarRule
    [Some(0), Some(1), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 9:ActionOpt
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 10:ActionOpt
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 11:TerminalRules
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 12:TerminalRule
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 13:StrConst
    [Some(2), Some(3), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 14:ImportStm
    [Some(2), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 15:GrammarRules
    [Some(0), Some(1), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 16:Terminals
    [Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 17:GrammarRule
    [Some(0), Some(1), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 18:Name
    [Some(4), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 19:Name
    [Some(4), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 20:TerminalRule
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 21:As
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 22:Terminals
    [Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 23:TerminalRules
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 24:Colon
    [Some(9), Some(34), Some(39), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 25:OBrace
    [Some(26), Some(24), Some(23), Some(25), Some(28), Some(22), Some(27), Some(34), Some(36), None, None, None, None, None, None],
    // State 26:Colon
    [Some(5), Some(7), Some(35), Some(39), None, None, None, None, None, None, None, None, None, None, None],
    // State 27:Name
    [Some(2), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 28:TerminalRules
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 29:OBracket
    [Some(9), Some(34), Some(39), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 30:Name
    [Some(15), Some(17), Some(19), Some(21), Some(5), Some(7), Some(9), Some(10), Some(13), Some(14), Some(16), Some(18), Some(20), Some(34), Some(39)],
    // State 31:StrConst
    [Some(15), Some(17), Some(19), Some(5), Some(7), Some(9), Some(10), Some(13), Some(14), Some(16), Some(18), Some(34), Some(39), None, None],
    // State 32:GrammarRuleRHS
    [Some(5), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 33:Production
    [Some(5), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 34:Assignment
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 35:Assignments
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 36:PlainAssignment
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 37:BoolAssignment
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 38:ProductionGroup
    [Some(15), Some(17), Some(19), Some(5), Some(7), Some(9), Some(10), Some(13), Some(14), Some(16), Some(18), Some(34), Some(39), None, None],
    // State 39:GrammarSymbolRef
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 40:GrammarSymbol
    [Some(15), Some(17), Some(19), Some(5), Some(7), Some(9), Some(10), Some(13), Some(14), Some(16), Some(18), Some(34), Some(39), None, None],
    // State 41:Left
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 42:Right
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 43:Reduce
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 44:Shift
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 45:Dynamic
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 46:NOPS
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 47:NOPSE
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 48:Name
    [Some(4), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 49:IntConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 50:ProdMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 51:ProdMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 52:UserMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 53:SemiColon
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 54:OBrace
    [Some(31), Some(26), Some(29), Some(30), Some(34), Some(36), None, None, None, None, None, None, None, None, None],
    // State 55:RegexTerm
    [Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 56:StrConst
    [Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 57:Recognizer
    [Some(5), Some(7), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 58:GrammarRuleRHS
    [Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 59:Equals
    [Some(9), Some(34), Some(39), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 60:QEquals
    [Some(9), Some(34), Some(39), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 61:SemiColon
    [Some(0), Some(1), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 62:Choice
    [Some(9), Some(34), Some(39), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 63:OBrace
    [Some(26), Some(24), Some(23), Some(25), Some(28), Some(22), Some(27), Some(34), Some(36), None, None, None, None, None, None],
    // State 64:Assignment
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 65:ZeroOrMore
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 66:ZeroOrMoreGreedy
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 67:OneOrMore
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 68:OneOrMoreGreedy
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 69:Optional
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 70:OptionalGreedy
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 71:RepetitionOperator
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 72:RepetitionOperatorOpt
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 73:RepetitionOperatorOp
    [Some(5), Some(7), Some(9), Some(10), Some(11), Some(13), Some(34), Some(39), None, None, None, None, None, None, None],
    // State 74:RepetitionOperatorOpt
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 75:Colon
    [Some(36), Some(37), Some(38), Some(39), None, None, None, None, None, None, None, None, None, None, None],
    // State 76:Comma
    [Some(26), Some(24), Some(23), Some(25), Some(28), Some(22), Some(27), Some(34), Some(36), None, None, None, None, None, None],
    // State 77:CBrace
    [Some(4), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 78:Dynamic
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 79:Prefer
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 80:Finish
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 81:NoFinish
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 82:IntConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 83:TermMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 84:TermMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 85:UserMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 86:SemiColon
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 87:OBrace
    [Some(31), Some(26), Some(29), Some(30), Some(34), Some(36), None, None, None, None, None, None, None, None, None],
    // State 88:CBracket
    [Some(15), Some(17), Some(19), Some(5), Some(7), Some(9), Some(10), Some(13), Some(14), Some(16), Some(18), Some(34), Some(39), None, None],
    // State 89:Name
    [Some(15), Some(17), Some(19), Some(5), Some(7), Some(9), Some(10), Some(13), Some(14), Some(16), Some(18), Some(34), Some(39), None, None],
    // State 90:GrammarSymbolRef
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 91:GrammarSymbolRef
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 92:Production
    [Some(5), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 93:ProdMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 94:OSBracket
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 95:RepetitionModifiersExp
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 96:RepetitionModifiersExpOpt
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 97:IntConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 98:FloatConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 99:BoolConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 100:StrConst
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 101:Const
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 102:ProdMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 103:Colon
    [Some(9), Some(34), Some(39), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 104:Comma
    [Some(31), Some(26), Some(29), Some(30), Some(34), Some(36), None, None, None, None, None, None, None, None, None],
    // State 105:CBrace
    [Some(5), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 106:TermMetaDatas
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 107:CBrace
    [Some(5), Some(10), Some(13), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 108:Name
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 109:RepetitionModifiers
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 110:RepetitionModifier
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 111:GrammarRuleRHS
    [Some(5), Some(13), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 112:TermMetaData
    [Some(6), Some(8), None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 113:SemiColon
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 114:CBrace
    [Some(5), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 115:Comma
    [Some(34), None, None, None, None, None, None, None, None, None, None, None, None, None, None],
    // State 116:CSBracket
    [Some(5), Some(7), Some(9), Some(10), Some(13), Some(34), Some(39), None, None, None, None, None, None, None, None],
    // State 117:SemiColon
    [Some(0), Some(1), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None],
    // State 118:SemiColon
    [Some(0), Some(34), Some(40), None, None, None, None, None, None, None, None, None, None, None, None],
    // State 119:RepetitionModifier
    [Some(6), Some(12), None, None, None, None, None, None, None, None, None, None, None, None, None],
],
recognizers: [
    // 0:STOP
    |input: &str| {
        logn!("Recognizing <STOP> -- ");
        if input.len() == 0 {
            log!("recognized");
            Some("")
        } else {
            log!("not recognized");
            None
        }
    },
    // 1:Terminals
    |input: &str| {
        logn!("Recognizing <Terminals> -- ");
        if input.starts_with("terminals"){
            log!("recognized");
            Some("terminals")
        } else {
            log!("not recognized");
            None
        }
    },
    // 2:Import
    |input: &str| {
        logn!("Recognizing <Import> -- ");
        if input.starts_with("import"){
            log!("recognized");
            Some("import")
        } else {
            log!("not recognized");
            None
        }
    },
    // 3:As
    |input: &str| {
        logn!("Recognizing <As> -- ");
        if input.starts_with("as"){
            log!("recognized");
            Some("as")
        } else {
            log!("not recognized");
            None
        }
    },
    // 4:Colon
    |input: &str| {
        logn!("Recognizing <Colon> -- ");
        if input.starts_with(":"){
            log!("recognized");
            Some(":")
        } else {
            log!("not recognized");
            None
        }
    },
    // 5:SemiColon
    |input: &str| {
        logn!("Recognizing <SemiColon> -- ");
        if input.starts_with(";"){
            log!("recognized");
            Some(";")
        } else {
            log!("not recognized");
            None
        }
    },
    // 6:Comma
    |input: &str| {
        logn!("Recognizing <Comma> -- ");
        if input.starts_with(","){
            log!("recognized");
            Some(",")
        } else {
            log!("not recognized");
            None
        }
    },
    // 7:OBrace
    |input: &str| {
        logn!("Recognizing <OBrace> -- ");
        if input.starts_with("{"){
            log!("recognized");
            Some("{")
        } else {
            log!("not recognized");
            None
        }
    },
    // 8:CBrace
    |input: &str| {
        logn!("Recognizing <CBrace> -- ");
        if input.starts_with("}"){
            log!("recognized");
            Some("}")
        } else {
            log!("not recognized");
            None
        }
    },
    // 9:OBracket
    |input: &str| {
        logn!("Recognizing <OBracket> -- ");
        if input.starts_with("("){
            log!("recognized");
            Some("(")
        } else {
            log!("not recognized");
            None
        }
    },
    // 10:CBracket
    |input: &str| {
        logn!("Recognizing <CBracket> -- ");
        if input.starts_with(")"){
            log!("recognized");
            Some(")")
        } else {
            log!("not recognized");
            None
        }
    },
    // 11:OSBracket
    |input: &str| {
        logn!("Recognizing <OSBracket> -- ");
        if input.starts_with("["){
            log!("recognized");
            Some("[")
        } else {
            log!("not recognized");
            None
        }
    },
    // 12:CSBracket
    |input: &str| {
        logn!("Recognizing <CSBracket> -- ");
        if input.starts_with("]"){
            log!("recognized");
            Some("]")
        } else {
            log!("not recognized");
            None
        }
    },
    // 13:Choice
    |input: &str| {
        logn!("Recognizing <Choice> -- ");
        if input.starts_with("|"){
            log!("recognized");
            Some("|")
        } else {
            log!("not recognized");
            None
        }
    },
    // 14:ZeroOrMore
    |input: &str| {
        logn!("Recognizing <ZeroOrMore> -- ");
        if input.starts_with("*"){
            log!("recognized");
            Some("*")
        } else {
            log!("not recognized");
            None
        }
    },
    // 15:ZeroOrMoreGreedy
    |input: &str| {
        logn!("Recognizing <ZeroOrMoreGreedy> -- ");
        if input.starts_with("*!"){
            log!("recognized");
            Some("*!")
        } else {
            log!("not recognized");
            None
        }
    },
    // 16:OneOrMore
    |input: &str| {
        logn!("Recognizing <OneOrMore> -- ");
        if input.starts_with("+"){
            log!("recognized");
            Some("+")
        } else {
            log!("not recognized");
            None
        }
    },
    // 17:OneOrMoreGreedy
    |input: &str| {
        logn!("Recognizing <OneOrMoreGreedy> -- ");
        if input.starts_with("+!"){
            log!("recognized");
            Some("+!")
        } else {
            log!("not recognized");
            None
        }
    },
    // 18:Optional
    |input: &str| {
        logn!("Recognizing <Optional> -- ");
        if input.starts_with("?"){
            log!("recognized");
            Some("?")
        } else {
            log!("not recognized");
            None
        }
    },
    // 19:OptionalGreedy
    |input: &str| {
        logn!("Recognizing <OptionalGreedy> -- ");
        if input.starts_with("?!"){
            log!("recognized");
            Some("?!")
        } else {
            log!("not recognized");
            None
        }
    },
    // 20:Equals
    |input: &str| {
        logn!("Recognizing <Equals> -- ");
        if input.starts_with("="){
            log!("recognized");
            Some("=")
        } else {
            log!("not recognized");
            None
        }
    },
    // 21:QEquals
    |input: &str| {
        logn!("Recognizing <QEquals> -- ");
        if input.starts_with("?="){
            log!("recognized");
            Some("?=")
        } else {
            log!("not recognized");
            None
        }
    },
    // 22:Left
    |input: &str| {
        logn!("Recognizing <Left> -- ");
        if input.starts_with("left"){
            log!("recognized");
            Some("left")
        } else {
            log!("not recognized");
            None
        }
    },
    // 23:Right
    |input: &str| {
        logn!("Recognizing <Right> -- ");
        if input.starts_with("right"){
            log!("recognized");
            Some("right")
        } else {
            log!("not recognized");
            None
        }
    },
    // 24:Reduce
    |input: &str| {
        logn!("Recognizing <Reduce> -- ");
        if input.starts_with("reduce"){
            log!("recognized");
            Some("reduce")
        } else {
            log!("not recognized");
            None
        }
    },
    // 25:Shift
    |input: &str| {
        logn!("Recognizing <Shift> -- ");
        if input.starts_with("shift"){
            log!("recognized");
            Some("shift")
        } else {
            log!("not recognized");
            None
        }
    },
    // 26:Dynamic
    |input: &str| {
        logn!("Recognizing <Dynamic> -- ");
        if input.starts_with("dynamic"){
            log!("recognized");
            Some("dynamic")
        } else {
            log!("not recognized");
            None
        }
    },
    // 27:NOPS
    |input: &str| {
        logn!("Recognizing <NOPS> -- ");
        if input.starts_with("nops"){
            log!("recognized");
            Some("nops")
        } else {
            log!("not recognized");
            None
        }
    },
    // 28:NOPSE
    |input: &str| {
        logn!("Recognizing <NOPSE> -- ");
        if input.starts_with("nopse"){
            log!("recognized");
            Some("nopse")
        } else {
            log!("not recognized");
            None
        }
    },
    // 29:Prefer
    |input: &str| {
        logn!("Recognizing <Prefer> -- ");
        if input.starts_with("prefer"){
            log!("recognized");
            Some("prefer")
        } else {
            log!("not recognized");
            None
        }
    },
    // 30:Finish
    |input: &str| {
        logn!("Recognizing <Finish> -- ");
        if input.starts_with("finish"){
            log!("recognized");
            Some("finish")
        } else {
            log!("not recognized");
            None
        }
    },
    // 31:NoFinish
    |input: &str| {
        logn!("Recognizing <NoFinish> -- ");
        if input.starts_with("nofinish"){
            log!("recognized");
            Some("nofinish")
        } else {
            log!("not recognized");
            None
        }
    },
    // 32:OComment
    |input: &str| {
        logn!("Recognizing <OComment> -- ");
        if input.starts_with("/*"){
            log!("recognized");
            Some("/*")
        } else {
            log!("not recognized");
            None
        }
    },
    // 33:CComment
    |input: &str| {
        logn!("Recognizing <CComment> -- ");
        if input.starts_with("*/"){
            log!("recognized");
            Some("*/")
        } else {
            log!("not recognized");
            None
        }
    },
    // 34:Name
    |input: &str| {
        logn!("Recognizing <Name> -- ");
        let regex = Regex::new(r#"^[a-zA-Z_][a-zA-Z0-9_\.]*"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 35:RegexTerm
    |input: &str| {
        logn!("Recognizing <RegexTerm> -- ");
        let regex = Regex::new(r#"^/(\\.|[^/\\])*/"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 36:IntConst
    |input: &str| {
        logn!("Recognizing <IntConst> -- ");
        let regex = Regex::new(r#"^\d+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 37:FloatConst
    |input: &str| {
        logn!("Recognizing <FloatConst> -- ");
        let regex = Regex::new(r#"^[+-]?(\d+\.\d*|\.\d+)([eE][+-]?\d+)?(?<=[\w\.])(?![\w\.])"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 38:BoolConst
    |input: &str| {
        logn!("Recognizing <BoolConst> -- ");
        let regex = Regex::new(r#"^true|false"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 39:StrConst
    |input: &str| {
        logn!("Recognizing <StrConst> -- ");
        let regex = Regex::new(r#"^(?s)(^'[^'\\]*(?:\\.[^'\\]*)*')|(^"[^"\\]*(?:\\.[^"\\]*)*")"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 40:Action
    |input: &str| {
        logn!("Recognizing <Action> -- ");
        let regex = Regex::new(r#"^@[a-zA-Z0-9_]+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 41:WS
    |input: &str| {
        logn!("Recognizing <WS> -- ");
        let regex = Regex::new(r#"^\s+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 42:CommentLine
    |input: &str| {
        logn!("Recognizing <CommentLine> -- ");
        let regex = Regex::new(r#"^//.*"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    // 43:NotComment
    |input: &str| {
        logn!("Recognizing <NotComment> -- ");
        let regex = Regex::new(r#"^((\*[^/])|[^\s*/]|/[^\*])+"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    ],
};

impl LexerDefinition for RustemoLexerDefinition {
    type Recognizer = for<'i> fn(&'i str) -> Option<&'i str>;

    fn recognizers(&self, state_index: StateIndex) -> RecognizerIterator<Self::Recognizer> {
            RecognizerIterator {
                terminals: &LEXER_DEFINITION.terminals,
                terminals_for_state: &LEXER_DEFINITION.terminals_for_state[state_index.0][..],
                recognizers: &LEXER_DEFINITION.recognizers,
                index: 0
            }
    }
}

pub struct RustemoBuilder {
    res_stack: Vec<Symbol>,
}

impl Builder for RustemoBuilder
{
    type Output = rustemo_actions::PGFile;

    fn new() -> Self {
        RustemoBuilder {
            res_stack: vec![],
        }
    }

    fn get_result(&mut self) -> RustemoResult<Self::Output> {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::PGFile(r)) => Ok(r),
            _ => panic!("Invalid result on the parsing stack!"),
        }
    }
}
impl<'i> LRBuilder<&'i str> for RustemoBuilder {

    fn shift_action(&mut self, term_idx: TermIndex, token: Token<&'i str>) {
        let termval = match TermKind::try_from(term_idx.0).unwrap() {
            TermKind::STOP => Terminal::STOP,
            TermKind::Terminals => Terminal::Terminals,
            TermKind::Import => Terminal::Import,
            TermKind::As => Terminal::As,
            TermKind::Colon => Terminal::Colon,
            TermKind::SemiColon => Terminal::SemiColon,
            TermKind::Comma => Terminal::Comma,
            TermKind::OBrace => Terminal::OBrace,
            TermKind::CBrace => Terminal::CBrace,
            TermKind::OBracket => Terminal::OBracket,
            TermKind::CBracket => Terminal::CBracket,
            TermKind::OSBracket => Terminal::OSBracket,
            TermKind::CSBracket => Terminal::CSBracket,
            TermKind::Choice => Terminal::Choice,
            TermKind::ZeroOrMore => Terminal::ZeroOrMore,
            TermKind::ZeroOrMoreGreedy => Terminal::ZeroOrMoreGreedy,
            TermKind::OneOrMore => Terminal::OneOrMore,
            TermKind::OneOrMoreGreedy => Terminal::OneOrMoreGreedy,
            TermKind::Optional => Terminal::Optional,
            TermKind::OptionalGreedy => Terminal::OptionalGreedy,
            TermKind::Equals => Terminal::Equals,
            TermKind::QEquals => Terminal::QEquals,
            TermKind::Left => Terminal::Left,
            TermKind::Right => Terminal::Right,
            TermKind::Reduce => Terminal::Reduce,
            TermKind::Shift => Terminal::Shift,
            TermKind::Dynamic => Terminal::Dynamic,
            TermKind::NOPS => Terminal::NOPS,
            TermKind::NOPSE => Terminal::NOPSE,
            TermKind::Prefer => Terminal::Prefer,
            TermKind::Finish => Terminal::Finish,
            TermKind::NoFinish => Terminal::NoFinish,
            TermKind::OComment => Terminal::OComment,
            TermKind::CComment => Terminal::CComment,
            TermKind::Name => Terminal::Name(rustemo_actions::name(token)),
            TermKind::RegexTerm => Terminal::RegexTerm(rustemo_actions::regex_term(token)),
            TermKind::IntConst => Terminal::IntConst(rustemo_actions::int_const(token)),
            TermKind::FloatConst => Terminal::FloatConst(rustemo_actions::float_const(token)),
            TermKind::BoolConst => Terminal::BoolConst(rustemo_actions::bool_const(token)),
            TermKind::StrConst => Terminal::StrConst(rustemo_actions::str_const(token)),
            TermKind::Action => Terminal::Action(rustemo_actions::action(token)),
            TermKind::WS => Terminal::WS(rustemo_actions::ws(token)),
            TermKind::CommentLine => Terminal::CommentLine(rustemo_actions::comment_line(token)),
            TermKind::NotComment => Terminal::NotComment(rustemo_actions::not_comment(token)),
        };
        self.res_stack.push(Symbol::Terminal(termval));
    }
    
    fn reduce_action(&mut self, prod_kind: ProdIndex, prod_len: usize, _prod_str: &'static str) {
        let prod = match ProdKind::try_from(prod_kind.0).unwrap() {
            ProdKind::PGFileP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::GrammarRules(p0)) => NonTerminal::PGFile(rustemo_actions::pg_file_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::PGFileP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Imports(p0)), Symbol::NonTerminal(NonTerminal::GrammarRules(p1))) => NonTerminal::PGFile(rustemo_actions::pg_file_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::PGFileP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarRules(p0)), _, Symbol::NonTerminal(NonTerminal::TerminalRules(p1))) => NonTerminal::PGFile(rustemo_actions::pg_file_p2(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::PGFileP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Imports(p0)), Symbol::NonTerminal(NonTerminal::GrammarRules(p1)), _, Symbol::NonTerminal(NonTerminal::TerminalRules(p2))) => NonTerminal::PGFile(rustemo_actions::pg_file_p3(p0, p1, p2)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::PGFileP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::TerminalRules(p0))) => NonTerminal::PGFile(rustemo_actions::pg_file_p4(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ImportsP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Imports(p0)), Symbol::NonTerminal(NonTerminal::ImportStm(p1))) => NonTerminal::Imports(rustemo_actions::imports_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ImportsP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::ImportStm(p0)) => NonTerminal::Imports(rustemo_actions::imports_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ImportStmP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::Terminal(Terminal::StrConst(p0))) => NonTerminal::ImportStm(rustemo_actions::import_stm_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ImportStmP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::Terminal(Terminal::StrConst(p0)), _, Symbol::Terminal(Terminal::Name(p1))) => NonTerminal::ImportStm(rustemo_actions::import_stm_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarRulesP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarRules(p0)), Symbol::NonTerminal(NonTerminal::GrammarRule(p1))) => NonTerminal::GrammarRules(rustemo_actions::grammar_rules_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarRulesP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::GrammarRule(p0)) => NonTerminal::GrammarRules(rustemo_actions::grammar_rules_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarRuleP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-5).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ActionOpt(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p2)), _) => NonTerminal::GrammarRule(rustemo_actions::grammar_rule_p0(p0, p1, p2)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarRuleP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-8).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ActionOpt(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p2)), _, _, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p3)), _) => NonTerminal::GrammarRule(rustemo_actions::grammar_rule_p1(p0, p1, p2, p3)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ActionOptP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::Action(p0)) => NonTerminal::ActionOpt(rustemo_actions::action_opt_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ActionOptP1 => NonTerminal::ActionOpt(rustemo_actions::action_opt_p1()),
            ProdKind::GrammarRuleRHSP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p0)), _, Symbol::NonTerminal(NonTerminal::Production(p1))) => NonTerminal::GrammarRuleRHS(rustemo_actions::grammar_rule_rhs_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarRuleRHSP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Production(p0)) => NonTerminal::GrammarRuleRHS(rustemo_actions::grammar_rule_rhs_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProductionP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Assignments(p0)) => NonTerminal::Production(rustemo_actions::production_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProductionP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Assignments(p0)), _, Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p1)), _) => NonTerminal::Production(rustemo_actions::production_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TerminalRulesP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::TerminalRules(p0)), Symbol::NonTerminal(NonTerminal::TerminalRule(p1))) => NonTerminal::TerminalRules(rustemo_actions::terminal_rules_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TerminalRulesP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::TerminalRule(p0)) => NonTerminal::TerminalRules(rustemo_actions::terminal_rules_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TerminalRuleP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-5).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ActionOpt(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::Recognizer(p2)), _) => NonTerminal::TerminalRule(rustemo_actions::terminal_rule_p0(p0, p1, p2)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TerminalRuleP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-4).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ActionOpt(p0)), Symbol::Terminal(Terminal::Name(p1)), _, _) => NonTerminal::TerminalRule(rustemo_actions::terminal_rule_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TerminalRuleP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-8).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ActionOpt(p0)), Symbol::Terminal(Terminal::Name(p1)), _, Symbol::NonTerminal(NonTerminal::Recognizer(p2)), _, Symbol::NonTerminal(NonTerminal::TermMetaDatas(p3)), _, _) => NonTerminal::TerminalRule(rustemo_actions::terminal_rule_p2(p0, p1, p2, p3)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TerminalRuleP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-7).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ActionOpt(p0)), Symbol::Terminal(Terminal::Name(p1)), _, _, Symbol::NonTerminal(NonTerminal::TermMetaDatas(p2)), _, _) => NonTerminal::TerminalRule(rustemo_actions::terminal_rule_p3(p0, p1, p2)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p0()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p1()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p2()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p3()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p4()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p5()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP6 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p6()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP7 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::IntConst(p0)) => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p7(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDataP8 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::UserMetaData(p0)) => NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_p8(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDatasP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p0)), _, Symbol::NonTerminal(NonTerminal::ProdMetaData(p1))) => NonTerminal::ProdMetaDatas(rustemo_actions::prod_meta_datas_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProdMetaDatasP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::ProdMetaData(p0)) => NonTerminal::ProdMetaDatas(rustemo_actions::prod_meta_datas_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDataP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(rustemo_actions::term_meta_data_p0()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDataP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(rustemo_actions::term_meta_data_p1()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDataP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(rustemo_actions::term_meta_data_p2()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDataP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::TermMetaData(rustemo_actions::term_meta_data_p3()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDataP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::IntConst(p0)) => NonTerminal::TermMetaData(rustemo_actions::term_meta_data_p4(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDataP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::UserMetaData(p0)) => NonTerminal::TermMetaData(rustemo_actions::term_meta_data_p5(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDatasP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::TermMetaDatas(p0)), _, Symbol::NonTerminal(NonTerminal::TermMetaData(p1))) => NonTerminal::TermMetaDatas(rustemo_actions::term_meta_datas_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::TermMetaDatasP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::TermMetaData(p0)) => NonTerminal::TermMetaDatas(rustemo_actions::term_meta_datas_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::UserMetaDataP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Name(p0)), _, Symbol::NonTerminal(NonTerminal::Const(p1))) => NonTerminal::UserMetaData(rustemo_actions::user_meta_data_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ConstP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::IntConst(p0)) => NonTerminal::Const(rustemo_actions::const_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ConstP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::FloatConst(p0)) => NonTerminal::Const(rustemo_actions::const_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ConstP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::BoolConst(p0)) => NonTerminal::Const(rustemo_actions::const_p2(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ConstP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::StrConst(p0)) => NonTerminal::Const(rustemo_actions::const_p3(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::AssignmentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::PlainAssignment(p0)) => NonTerminal::Assignment(rustemo_actions::assignment_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::AssignmentP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::BoolAssignment(p0)) => NonTerminal::Assignment(rustemo_actions::assignment_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::AssignmentP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::GrammarSymbolRef(p0)) => NonTerminal::Assignment(rustemo_actions::assignment_p2(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::AssignmentsP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Assignments(p0)), Symbol::NonTerminal(NonTerminal::Assignment(p1))) => NonTerminal::Assignments(rustemo_actions::assignments_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::AssignmentsP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Assignment(p0)) => NonTerminal::Assignments(rustemo_actions::assignments_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::PlainAssignmentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Name(p0)), _, Symbol::NonTerminal(NonTerminal::GrammarSymbolRef(p1))) => NonTerminal::PlainAssignment(rustemo_actions::plain_assignment_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::BoolAssignmentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::Terminal(Terminal::Name(p0)), _, Symbol::NonTerminal(NonTerminal::GrammarSymbolRef(p1))) => NonTerminal::BoolAssignment(rustemo_actions::bool_assignment_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::ProductionGroupP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p0)), _) => NonTerminal::ProductionGroup(rustemo_actions::production_group_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarSymbolRefP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::GrammarSymbol(p0)), Symbol::NonTerminal(NonTerminal::RepetitionOperatorOpt(p1))) => NonTerminal::GrammarSymbolRef(rustemo_actions::grammar_symbol_ref_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarSymbolRefP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::ProductionGroup(p0)), Symbol::NonTerminal(NonTerminal::RepetitionOperatorOpt(p1))) => NonTerminal::GrammarSymbolRef(rustemo_actions::grammar_symbol_ref_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::RepetitionOperatorOp(p0)), Symbol::NonTerminal(NonTerminal::RepetitionModifiersExpOpt(p1))) => NonTerminal::RepetitionOperator(rustemo_actions::repetition_operator_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOptP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::RepetitionOperator(p0)) => NonTerminal::RepetitionOperatorOpt(rustemo_actions::repetition_operator_opt_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOptP1 => NonTerminal::RepetitionOperatorOpt(rustemo_actions::repetition_operator_opt_p1()),
            ProdKind::RepetitionOperatorOpP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(rustemo_actions::repetition_operator_op_p0()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOpP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(rustemo_actions::repetition_operator_op_p1()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOpP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(rustemo_actions::repetition_operator_op_p2()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOpP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(rustemo_actions::repetition_operator_op_p3()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOpP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(rustemo_actions::repetition_operator_op_p4()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionOperatorOpP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    _ => NonTerminal::RepetitionOperatorOp(rustemo_actions::repetition_operator_op_p5()),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionModifiersExpP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::RepetitionModifiers(p0)), _) => NonTerminal::RepetitionModifiersExp(rustemo_actions::repetition_modifiers_exp_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionModifiersExpOptP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::RepetitionModifiersExp(p0)) => NonTerminal::RepetitionModifiersExpOpt(rustemo_actions::repetition_modifiers_exp_opt_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionModifiersExpOptP1 => NonTerminal::RepetitionModifiersExpOpt(rustemo_actions::repetition_modifiers_exp_opt_p1()),
            ProdKind::RepetitionModifiersP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::RepetitionModifiers(p0)), _, Symbol::NonTerminal(NonTerminal::RepetitionModifier(p1))) => NonTerminal::RepetitionModifiers(rustemo_actions::repetition_modifiers_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionModifiersP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::RepetitionModifier(p0)) => NonTerminal::RepetitionModifiers(rustemo_actions::repetition_modifiers_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RepetitionModifierP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::Name(p0)) => NonTerminal::RepetitionModifier(rustemo_actions::repetition_modifier_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarSymbolP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::Name(p0)) => NonTerminal::GrammarSymbol(rustemo_actions::grammar_symbol_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::GrammarSymbolP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::StrConst(p0)) => NonTerminal::GrammarSymbol(rustemo_actions::grammar_symbol_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RecognizerP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::StrConst(p0)) => NonTerminal::Recognizer(rustemo_actions::recognizer_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::RecognizerP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::RegexTerm(p0)) => NonTerminal::Recognizer(rustemo_actions::recognizer_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::LayoutP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::LayoutItem(p0)) => NonTerminal::Layout(rustemo_actions::layout_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::LayoutP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Layout(p0)), Symbol::NonTerminal(NonTerminal::LayoutItem(p1))) => NonTerminal::Layout(rustemo_actions::layout_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::LayoutP2 => NonTerminal::Layout(rustemo_actions::layout_p2()),
            ProdKind::LayoutItemP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::WS(p0)) => NonTerminal::LayoutItem(rustemo_actions::layout_item_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::LayoutItemP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Comment(p0)) => NonTerminal::LayoutItem(rustemo_actions::layout_item_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CommentP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::Corncs(p0)), _) => NonTerminal::Comment(rustemo_actions::comment_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CommentP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::CommentLine(p0)) => NonTerminal::Comment(rustemo_actions::comment_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CorncsP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Cornc(p0)) => NonTerminal::Corncs(rustemo_actions::corncs_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CorncsP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-2).into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::Corncs(p0)), Symbol::NonTerminal(NonTerminal::Cornc(p1))) => NonTerminal::Corncs(rustemo_actions::corncs_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CorncsP2 => NonTerminal::Corncs(rustemo_actions::corncs_p2()),
            ProdKind::CorncP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::NonTerminal(NonTerminal::Comment(p0)) => NonTerminal::Cornc(rustemo_actions::cornc_p0(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CorncP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::NotComment(p0)) => NonTerminal::Cornc(rustemo_actions::cornc_p1(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::CorncP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::WS(p0)) => NonTerminal::Cornc(rustemo_actions::cornc_p2(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
