/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::{Hash, Hasher};
use rustemo::Result;
use rustemo::lexer::{self, Token};
use rustemo::parser::Parser;
use rustemo::builder::Builder;
use rustemo::lr::builder::{LRBuilder, SliceBuilder};
use rustemo::lr::parser::{LRParser, ParserDefinition};
use rustemo::lr::parser::Action::{self, Shift, Reduce, Accept, Error};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
const TERMINAL_COUNT: usize = 44usize;
const NONTERMINAL_COUNT: usize = 44usize;
const STATE_COUNT: usize = 141usize;
#[allow(dead_code)]
const MAX_ACTIONS: usize = 15usize;
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::lexer::StringLexer;
use super::rustemo_actions;
pub type Input = str;
pub type Context<'i> = lexer::Context<'i, Input>;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Terminals,
    Import,
    As,
    Colon,
    SemiColon,
    Comma,
    OBrace,
    CBrace,
    OBracket,
    CBracket,
    OSBracket,
    CSBracket,
    Choice,
    ZeroOrMore,
    ZeroOrMoreGreedy,
    OneOrMore,
    OneOrMoreGreedy,
    Optional,
    OptionalGreedy,
    Equals,
    QEquals,
    Left,
    Right,
    Reduce,
    Shift,
    Dynamic,
    NOPS,
    NOPSE,
    Prefer,
    Finish,
    NoFinish,
    OComment,
    CComment,
    Name,
    RegexTerm,
    IntConst,
    FloatConst,
    BoolConst,
    StrConst,
    Annotation,
    WS,
    CommentLine,
    NotComment,
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, Debug)]
pub enum ProdKind {
    FileP1,
    GrammarRule1P1,
    GrammarRule1P2,
    FileP2,
    ImportStm1P1,
    ImportStm1P2,
    FileP3,
    TerminalRule1P1,
    TerminalRule1P2,
    FileP4,
    FileP5,
    ImportStmP1,
    ImportStmP2,
    GrammarRuleP1,
    AnnotationOptP1,
    AnnotationOptP2,
    GrammarRuleP2,
    GrammarRuleRHSP1,
    GrammarRuleRHSP2,
    ProductionP1,
    Assignment1P1,
    Assignment1P2,
    ProductionP2,
    TerminalRuleP1,
    TerminalRuleP2,
    TerminalRuleP3,
    TerminalRuleP4,
    ProdMetaDataLeft,
    ProdMetaDataReduce,
    ProdMetaDataRight,
    ProdMetaDataShift,
    ProdMetaDataDynamic,
    ProdMetaDataNOPS,
    ProdMetaDataNOPSE,
    ProdMetaDataPriority,
    ProdMetaDataP9,
    ProdMetaDataP10,
    ProdMetaDatasP1,
    ProdMetaDatasP2,
    TermMetaDataPrefer,
    TermMetaDataFinish,
    TermMetaDataNoFinish,
    TermMetaDataDynamic,
    TermMetaDataPriority,
    TermMetaDataP6,
    TermMetaDatasP1,
    TermMetaDatasP2,
    UserMetaDataP1,
    ProdKindP1,
    ConstValP1,
    ConstValP2,
    ConstValP3,
    ConstValP4,
    AssignmentP1,
    AssignmentP2,
    AssignmentP3,
    PlainAssignmentP1,
    BoolAssignmentP1,
    ProductionGroupP1,
    GrammarSymbolRefP1,
    RepetitionOperatorOptP1,
    RepetitionOperatorOptP2,
    GrammarSymbolRefP2,
    RepetitionOperatorP1,
    RepetitionModifiersOptP1,
    RepetitionModifiersOptP2,
    RepetitionOperatorOpZeroOrMore,
    RepetitionOperatorOpZeroOrMoreGreedy,
    RepetitionOperatorOpOneOrMore,
    RepetitionOperatorOpOneOrMoreGreedy,
    RepetitionOperatorOpOptional,
    RepetitionOperatorOpOptionalGreedy,
    RepetitionModifiersP1,
    RepetitionModifier1P1,
    RepetitionModifier1P2,
    RepetitionModifierP1,
    GrammarSymbolP1,
    GrammarSymbolP2,
    RecognizerP1,
    RecognizerP2,
    LayoutP1,
    LayoutItem1P1,
    LayoutItem1P2,
    LayoutItem0P1,
    LayoutItem0P2,
    LayoutItemP1,
    LayoutItemP2,
    CommentP1,
    CommentP2,
    CorncsP1,
    Cornc1P1,
    Cornc1P2,
    Cornc0P1,
    Cornc0P2,
    CorncP1,
    CorncP2,
    CorncP3,
}
impl std::fmt::Display for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::FileP1 => "File: GrammarRule1",
            ProdKind::GrammarRule1P1 => "GrammarRule1: GrammarRule1 GrammarRule",
            ProdKind::GrammarRule1P2 => "GrammarRule1: GrammarRule",
            ProdKind::FileP2 => "File: ImportStm1 GrammarRule1",
            ProdKind::ImportStm1P1 => "ImportStm1: ImportStm1 ImportStm",
            ProdKind::ImportStm1P2 => "ImportStm1: ImportStm",
            ProdKind::FileP3 => "File: GrammarRule1 Terminals TerminalRule1",
            ProdKind::TerminalRule1P1 => "TerminalRule1: TerminalRule1 TerminalRule",
            ProdKind::TerminalRule1P2 => "TerminalRule1: TerminalRule",
            ProdKind::FileP4 => "File: ImportStm1 GrammarRule1 Terminals TerminalRule1",
            ProdKind::FileP5 => "File: Terminals TerminalRule1",
            ProdKind::ImportStmP1 => "ImportStm: Import StrConst",
            ProdKind::ImportStmP2 => "ImportStm: Import StrConst As Name",
            ProdKind::GrammarRuleP1 => {
                "GrammarRule: AnnotationOpt Name Colon GrammarRuleRHS SemiColon"
            }
            ProdKind::AnnotationOptP1 => "AnnotationOpt: Annotation",
            ProdKind::AnnotationOptP2 => "AnnotationOpt: ",
            ProdKind::GrammarRuleP2 => {
                "GrammarRule: AnnotationOpt Name OBrace ProdMetaDatas CBrace Colon GrammarRuleRHS SemiColon"
            }
            ProdKind::GrammarRuleRHSP1 => {
                "GrammarRuleRHS: GrammarRuleRHS Choice Production"
            }
            ProdKind::GrammarRuleRHSP2 => "GrammarRuleRHS: Production",
            ProdKind::ProductionP1 => "Production: Assignment1",
            ProdKind::Assignment1P1 => "Assignment1: Assignment1 Assignment",
            ProdKind::Assignment1P2 => "Assignment1: Assignment",
            ProdKind::ProductionP2 => {
                "Production: Assignment1 OBrace ProdMetaDatas CBrace"
            }
            ProdKind::TerminalRuleP1 => {
                "TerminalRule: AnnotationOpt Name Colon Recognizer SemiColon"
            }
            ProdKind::TerminalRuleP2 => {
                "TerminalRule: AnnotationOpt Name Colon SemiColon"
            }
            ProdKind::TerminalRuleP3 => {
                "TerminalRule: AnnotationOpt Name Colon Recognizer OBrace TermMetaDatas CBrace SemiColon"
            }
            ProdKind::TerminalRuleP4 => {
                "TerminalRule: AnnotationOpt Name Colon OBrace TermMetaDatas CBrace SemiColon"
            }
            ProdKind::ProdMetaDataLeft => "ProdMetaData: Left",
            ProdKind::ProdMetaDataReduce => "ProdMetaData: Reduce",
            ProdKind::ProdMetaDataRight => "ProdMetaData: Right",
            ProdKind::ProdMetaDataShift => "ProdMetaData: Shift",
            ProdKind::ProdMetaDataDynamic => "ProdMetaData: Dynamic",
            ProdKind::ProdMetaDataNOPS => "ProdMetaData: NOPS",
            ProdKind::ProdMetaDataNOPSE => "ProdMetaData: NOPSE",
            ProdKind::ProdMetaDataPriority => "ProdMetaData: IntConst",
            ProdKind::ProdMetaDataP9 => "ProdMetaData: UserMetaData",
            ProdKind::ProdMetaDataP10 => "ProdMetaData: ProdKind",
            ProdKind::ProdMetaDatasP1 => {
                "ProdMetaDatas: ProdMetaDatas Comma ProdMetaData"
            }
            ProdKind::ProdMetaDatasP2 => "ProdMetaDatas: ProdMetaData",
            ProdKind::TermMetaDataPrefer => "TermMetaData: Prefer",
            ProdKind::TermMetaDataFinish => "TermMetaData: Finish",
            ProdKind::TermMetaDataNoFinish => "TermMetaData: NoFinish",
            ProdKind::TermMetaDataDynamic => "TermMetaData: Dynamic",
            ProdKind::TermMetaDataPriority => "TermMetaData: IntConst",
            ProdKind::TermMetaDataP6 => "TermMetaData: UserMetaData",
            ProdKind::TermMetaDatasP1 => {
                "TermMetaDatas: TermMetaDatas Comma TermMetaData"
            }
            ProdKind::TermMetaDatasP2 => "TermMetaDatas: TermMetaData",
            ProdKind::UserMetaDataP1 => "UserMetaData: Name Colon ConstVal",
            ProdKind::ProdKindP1 => "ProdKind: Name",
            ProdKind::ConstValP1 => "ConstVal: IntConst",
            ProdKind::ConstValP2 => "ConstVal: FloatConst",
            ProdKind::ConstValP3 => "ConstVal: BoolConst",
            ProdKind::ConstValP4 => "ConstVal: StrConst",
            ProdKind::AssignmentP1 => "Assignment: PlainAssignment",
            ProdKind::AssignmentP2 => "Assignment: BoolAssignment",
            ProdKind::AssignmentP3 => "Assignment: GrammarSymbolRef",
            ProdKind::PlainAssignmentP1 => {
                "PlainAssignment: Name Equals GrammarSymbolRef"
            }
            ProdKind::BoolAssignmentP1 => "BoolAssignment: Name QEquals GrammarSymbolRef",
            ProdKind::ProductionGroupP1 => {
                "ProductionGroup: OBracket GrammarRuleRHS CBracket"
            }
            ProdKind::GrammarSymbolRefP1 => {
                "GrammarSymbolRef: GrammarSymbol RepetitionOperatorOpt"
            }
            ProdKind::RepetitionOperatorOptP1 => {
                "RepetitionOperatorOpt: RepetitionOperator"
            }
            ProdKind::RepetitionOperatorOptP2 => "RepetitionOperatorOpt: ",
            ProdKind::GrammarSymbolRefP2 => {
                "GrammarSymbolRef: ProductionGroup RepetitionOperatorOpt"
            }
            ProdKind::RepetitionOperatorP1 => {
                "RepetitionOperator: RepetitionOperatorOp RepetitionModifiersOpt"
            }
            ProdKind::RepetitionModifiersOptP1 => {
                "RepetitionModifiersOpt: RepetitionModifiers"
            }
            ProdKind::RepetitionModifiersOptP2 => "RepetitionModifiersOpt: ",
            ProdKind::RepetitionOperatorOpZeroOrMore => {
                "RepetitionOperatorOp: ZeroOrMore"
            }
            ProdKind::RepetitionOperatorOpZeroOrMoreGreedy => {
                "RepetitionOperatorOp: ZeroOrMoreGreedy"
            }
            ProdKind::RepetitionOperatorOpOneOrMore => "RepetitionOperatorOp: OneOrMore",
            ProdKind::RepetitionOperatorOpOneOrMoreGreedy => {
                "RepetitionOperatorOp: OneOrMoreGreedy"
            }
            ProdKind::RepetitionOperatorOpOptional => "RepetitionOperatorOp: Optional",
            ProdKind::RepetitionOperatorOpOptionalGreedy => {
                "RepetitionOperatorOp: OptionalGreedy"
            }
            ProdKind::RepetitionModifiersP1 => {
                "RepetitionModifiers: OSBracket RepetitionModifier1 CSBracket"
            }
            ProdKind::RepetitionModifier1P1 => {
                "RepetitionModifier1: RepetitionModifier1 Comma RepetitionModifier"
            }
            ProdKind::RepetitionModifier1P2 => "RepetitionModifier1: RepetitionModifier",
            ProdKind::RepetitionModifierP1 => "RepetitionModifier: Name",
            ProdKind::GrammarSymbolP1 => "GrammarSymbol: Name",
            ProdKind::GrammarSymbolP2 => "GrammarSymbol: StrConst",
            ProdKind::RecognizerP1 => "Recognizer: StrConst",
            ProdKind::RecognizerP2 => "Recognizer: RegexTerm",
            ProdKind::LayoutP1 => "Layout: LayoutItem0",
            ProdKind::LayoutItem1P1 => "LayoutItem1: LayoutItem1 LayoutItem",
            ProdKind::LayoutItem1P2 => "LayoutItem1: LayoutItem",
            ProdKind::LayoutItem0P1 => "LayoutItem0: LayoutItem1",
            ProdKind::LayoutItem0P2 => "LayoutItem0: ",
            ProdKind::LayoutItemP1 => "LayoutItem: WS",
            ProdKind::LayoutItemP2 => "LayoutItem: Comment",
            ProdKind::CommentP1 => "Comment: OComment Corncs CComment",
            ProdKind::CommentP2 => "Comment: CommentLine",
            ProdKind::CorncsP1 => "Corncs: Cornc0",
            ProdKind::Cornc1P1 => "Cornc1: Cornc1 Cornc",
            ProdKind::Cornc1P2 => "Cornc1: Cornc",
            ProdKind::Cornc0P1 => "Cornc0: Cornc1",
            ProdKind::Cornc0P2 => "Cornc0: ",
            ProdKind::CorncP1 => "Cornc: Comment",
            ProdKind::CorncP2 => "Cornc: NotComment",
            ProdKind::CorncP3 => "Cornc: WS",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    AUGL,
    File,
    GrammarRule1,
    ImportStm1,
    TerminalRule1,
    ImportStm,
    GrammarRule,
    AnnotationOpt,
    GrammarRuleRHS,
    Production,
    Assignment1,
    TerminalRule,
    ProdMetaData,
    ProdMetaDatas,
    TermMetaData,
    TermMetaDatas,
    UserMetaData,
    ProdKind,
    ConstVal,
    Assignment,
    PlainAssignment,
    BoolAssignment,
    ProductionGroup,
    GrammarSymbolRef,
    RepetitionOperatorOpt,
    RepetitionOperator,
    RepetitionModifiersOpt,
    RepetitionOperatorOp,
    RepetitionModifiers,
    RepetitionModifier1,
    RepetitionModifier,
    GrammarSymbol,
    Recognizer,
    Layout,
    LayoutItem1,
    LayoutItem0,
    LayoutItem,
    Comment,
    Corncs,
    Cornc1,
    Cornc0,
    Cornc,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::FileP1 => NonTermKind::File,
            ProdKind::GrammarRule1P1 => NonTermKind::GrammarRule1,
            ProdKind::GrammarRule1P2 => NonTermKind::GrammarRule1,
            ProdKind::FileP2 => NonTermKind::File,
            ProdKind::ImportStm1P1 => NonTermKind::ImportStm1,
            ProdKind::ImportStm1P2 => NonTermKind::ImportStm1,
            ProdKind::FileP3 => NonTermKind::File,
            ProdKind::TerminalRule1P1 => NonTermKind::TerminalRule1,
            ProdKind::TerminalRule1P2 => NonTermKind::TerminalRule1,
            ProdKind::FileP4 => NonTermKind::File,
            ProdKind::FileP5 => NonTermKind::File,
            ProdKind::ImportStmP1 => NonTermKind::ImportStm,
            ProdKind::ImportStmP2 => NonTermKind::ImportStm,
            ProdKind::GrammarRuleP1 => NonTermKind::GrammarRule,
            ProdKind::AnnotationOptP1 => NonTermKind::AnnotationOpt,
            ProdKind::AnnotationOptP2 => NonTermKind::AnnotationOpt,
            ProdKind::GrammarRuleP2 => NonTermKind::GrammarRule,
            ProdKind::GrammarRuleRHSP1 => NonTermKind::GrammarRuleRHS,
            ProdKind::GrammarRuleRHSP2 => NonTermKind::GrammarRuleRHS,
            ProdKind::ProductionP1 => NonTermKind::Production,
            ProdKind::Assignment1P1 => NonTermKind::Assignment1,
            ProdKind::Assignment1P2 => NonTermKind::Assignment1,
            ProdKind::ProductionP2 => NonTermKind::Production,
            ProdKind::TerminalRuleP1 => NonTermKind::TerminalRule,
            ProdKind::TerminalRuleP2 => NonTermKind::TerminalRule,
            ProdKind::TerminalRuleP3 => NonTermKind::TerminalRule,
            ProdKind::TerminalRuleP4 => NonTermKind::TerminalRule,
            ProdKind::ProdMetaDataLeft => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataReduce => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataRight => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataShift => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataDynamic => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataNOPS => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataNOPSE => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataPriority => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataP9 => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDataP10 => NonTermKind::ProdMetaData,
            ProdKind::ProdMetaDatasP1 => NonTermKind::ProdMetaDatas,
            ProdKind::ProdMetaDatasP2 => NonTermKind::ProdMetaDatas,
            ProdKind::TermMetaDataPrefer => NonTermKind::TermMetaData,
            ProdKind::TermMetaDataFinish => NonTermKind::TermMetaData,
            ProdKind::TermMetaDataNoFinish => NonTermKind::TermMetaData,
            ProdKind::TermMetaDataDynamic => NonTermKind::TermMetaData,
            ProdKind::TermMetaDataPriority => NonTermKind::TermMetaData,
            ProdKind::TermMetaDataP6 => NonTermKind::TermMetaData,
            ProdKind::TermMetaDatasP1 => NonTermKind::TermMetaDatas,
            ProdKind::TermMetaDatasP2 => NonTermKind::TermMetaDatas,
            ProdKind::UserMetaDataP1 => NonTermKind::UserMetaData,
            ProdKind::ProdKindP1 => NonTermKind::ProdKind,
            ProdKind::ConstValP1 => NonTermKind::ConstVal,
            ProdKind::ConstValP2 => NonTermKind::ConstVal,
            ProdKind::ConstValP3 => NonTermKind::ConstVal,
            ProdKind::ConstValP4 => NonTermKind::ConstVal,
            ProdKind::AssignmentP1 => NonTermKind::Assignment,
            ProdKind::AssignmentP2 => NonTermKind::Assignment,
            ProdKind::AssignmentP3 => NonTermKind::Assignment,
            ProdKind::PlainAssignmentP1 => NonTermKind::PlainAssignment,
            ProdKind::BoolAssignmentP1 => NonTermKind::BoolAssignment,
            ProdKind::ProductionGroupP1 => NonTermKind::ProductionGroup,
            ProdKind::GrammarSymbolRefP1 => NonTermKind::GrammarSymbolRef,
            ProdKind::RepetitionOperatorOptP1 => NonTermKind::RepetitionOperatorOpt,
            ProdKind::RepetitionOperatorOptP2 => NonTermKind::RepetitionOperatorOpt,
            ProdKind::GrammarSymbolRefP2 => NonTermKind::GrammarSymbolRef,
            ProdKind::RepetitionOperatorP1 => NonTermKind::RepetitionOperator,
            ProdKind::RepetitionModifiersOptP1 => NonTermKind::RepetitionModifiersOpt,
            ProdKind::RepetitionModifiersOptP2 => NonTermKind::RepetitionModifiersOpt,
            ProdKind::RepetitionOperatorOpZeroOrMore => NonTermKind::RepetitionOperatorOp,
            ProdKind::RepetitionOperatorOpZeroOrMoreGreedy => {
                NonTermKind::RepetitionOperatorOp
            }
            ProdKind::RepetitionOperatorOpOneOrMore => NonTermKind::RepetitionOperatorOp,
            ProdKind::RepetitionOperatorOpOneOrMoreGreedy => {
                NonTermKind::RepetitionOperatorOp
            }
            ProdKind::RepetitionOperatorOpOptional => NonTermKind::RepetitionOperatorOp,
            ProdKind::RepetitionOperatorOpOptionalGreedy => {
                NonTermKind::RepetitionOperatorOp
            }
            ProdKind::RepetitionModifiersP1 => NonTermKind::RepetitionModifiers,
            ProdKind::RepetitionModifier1P1 => NonTermKind::RepetitionModifier1,
            ProdKind::RepetitionModifier1P2 => NonTermKind::RepetitionModifier1,
            ProdKind::RepetitionModifierP1 => NonTermKind::RepetitionModifier,
            ProdKind::GrammarSymbolP1 => NonTermKind::GrammarSymbol,
            ProdKind::GrammarSymbolP2 => NonTermKind::GrammarSymbol,
            ProdKind::RecognizerP1 => NonTermKind::Recognizer,
            ProdKind::RecognizerP2 => NonTermKind::Recognizer,
            ProdKind::LayoutP1 => NonTermKind::Layout,
            ProdKind::LayoutItem1P1 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem1P2 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem0P1 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItem0P2 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItemP1 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP2 => NonTermKind::LayoutItem,
            ProdKind::CommentP1 => NonTermKind::Comment,
            ProdKind::CommentP2 => NonTermKind::Comment,
            ProdKind::CorncsP1 => NonTermKind::Corncs,
            ProdKind::Cornc1P1 => NonTermKind::Cornc1,
            ProdKind::Cornc1P2 => NonTermKind::Cornc1,
            ProdKind::Cornc0P1 => NonTermKind::Cornc0,
            ProdKind::Cornc0P2 => NonTermKind::Cornc0,
            ProdKind::CorncP1 => NonTermKind::Cornc,
            ProdKind::CorncP2 => NonTermKind::Cornc,
            ProdKind::CorncP3 => NonTermKind::Cornc,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, Debug)]
pub enum State {
    AUGS0,
    TerminalsS1,
    ImportS2,
    AnnotationS3,
    FileS4,
    GrammarRule1S5,
    ImportStm1S6,
    ImportStmS7,
    GrammarRuleS8,
    AnnotationOptS9,
    TerminalRule1S10,
    AnnotationOptS11,
    TerminalRuleS12,
    StrConstS13,
    TerminalsS14,
    GrammarRuleS15,
    GrammarRule1S16,
    ImportStmS17,
    NameS18,
    TerminalRuleS19,
    NameS20,
    AsS21,
    TerminalRule1S22,
    TerminalsS23,
    ColonS24,
    OBraceS25,
    ColonS26,
    NameS27,
    TerminalRule1S28,
    OBracketS29,
    NameS30,
    StrConstS31,
    GrammarRuleRHSS32,
    ProductionS33,
    Assignment1S34,
    AssignmentS35,
    PlainAssignmentS36,
    BoolAssignmentS37,
    ProductionGroupS38,
    GrammarSymbolRefS39,
    GrammarSymbolS40,
    LeftS41,
    RightS42,
    ReduceS43,
    ShiftS44,
    DynamicS45,
    NOPSS46,
    NOPSES47,
    NameS48,
    IntConstS49,
    ProdMetaDataS50,
    ProdMetaDatasS51,
    UserMetaDataS52,
    ProdKindS53,
    SemiColonS54,
    OBraceS55,
    RegexTermS56,
    StrConstS57,
    RecognizerS58,
    GrammarRuleRHSS59,
    EqualsS60,
    QEqualsS61,
    SemiColonS62,
    ChoiceS63,
    OBraceS64,
    AssignmentS65,
    ZeroOrMoreS66,
    ZeroOrMoreGreedyS67,
    OneOrMoreS68,
    OneOrMoreGreedyS69,
    OptionalS70,
    OptionalGreedyS71,
    RepetitionOperatorOptS72,
    RepetitionOperatorS73,
    RepetitionOperatorOpS74,
    RepetitionOperatorOptS75,
    ColonS76,
    CommaS77,
    CBraceS78,
    DynamicS79,
    PreferS80,
    FinishS81,
    NoFinishS82,
    NameS83,
    IntConstS84,
    TermMetaDataS85,
    TermMetaDatasS86,
    UserMetaDataS87,
    SemiColonS88,
    OBraceS89,
    CBracketS90,
    NameS91,
    GrammarSymbolRefS92,
    GrammarSymbolRefS93,
    ProductionS94,
    ProdMetaDatasS95,
    OSBracketS96,
    RepetitionModifiersOptS97,
    RepetitionModifiersS98,
    IntConstS99,
    FloatConstS100,
    BoolConstS101,
    StrConstS102,
    ConstValS103,
    ProdMetaDataS104,
    ColonS105,
    CommaS106,
    CBraceS107,
    TermMetaDatasS108,
    CBraceS109,
    NameS110,
    RepetitionModifier1S111,
    RepetitionModifierS112,
    GrammarRuleRHSS113,
    TermMetaDataS114,
    SemiColonS115,
    CBraceS116,
    CommaS117,
    CSBracketS118,
    SemiColonS119,
    SemiColonS120,
    RepetitionModifierS121,
    AUGLS122,
    OCommentS123,
    WSS124,
    CommentLineS125,
    LayoutS126,
    LayoutItem1S127,
    LayoutItem0S128,
    LayoutItemS129,
    CommentS130,
    WSS131,
    NotCommentS132,
    CommentS133,
    CorncsS134,
    Cornc1S135,
    Cornc0S136,
    CorncS137,
    LayoutItemS138,
    CCommentS139,
    CorncS140,
}
impl std::fmt::Display for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::TerminalsS1 => "1:Terminals",
            State::ImportS2 => "2:Import",
            State::AnnotationS3 => "3:Annotation",
            State::FileS4 => "4:File",
            State::GrammarRule1S5 => "5:GrammarRule1",
            State::ImportStm1S6 => "6:ImportStm1",
            State::ImportStmS7 => "7:ImportStm",
            State::GrammarRuleS8 => "8:GrammarRule",
            State::AnnotationOptS9 => "9:AnnotationOpt",
            State::TerminalRule1S10 => "10:TerminalRule1",
            State::AnnotationOptS11 => "11:AnnotationOpt",
            State::TerminalRuleS12 => "12:TerminalRule",
            State::StrConstS13 => "13:StrConst",
            State::TerminalsS14 => "14:Terminals",
            State::GrammarRuleS15 => "15:GrammarRule",
            State::GrammarRule1S16 => "16:GrammarRule1",
            State::ImportStmS17 => "17:ImportStm",
            State::NameS18 => "18:Name",
            State::TerminalRuleS19 => "19:TerminalRule",
            State::NameS20 => "20:Name",
            State::AsS21 => "21:As",
            State::TerminalRule1S22 => "22:TerminalRule1",
            State::TerminalsS23 => "23:Terminals",
            State::ColonS24 => "24:Colon",
            State::OBraceS25 => "25:OBrace",
            State::ColonS26 => "26:Colon",
            State::NameS27 => "27:Name",
            State::TerminalRule1S28 => "28:TerminalRule1",
            State::OBracketS29 => "29:OBracket",
            State::NameS30 => "30:Name",
            State::StrConstS31 => "31:StrConst",
            State::GrammarRuleRHSS32 => "32:GrammarRuleRHS",
            State::ProductionS33 => "33:Production",
            State::Assignment1S34 => "34:Assignment1",
            State::AssignmentS35 => "35:Assignment",
            State::PlainAssignmentS36 => "36:PlainAssignment",
            State::BoolAssignmentS37 => "37:BoolAssignment",
            State::ProductionGroupS38 => "38:ProductionGroup",
            State::GrammarSymbolRefS39 => "39:GrammarSymbolRef",
            State::GrammarSymbolS40 => "40:GrammarSymbol",
            State::LeftS41 => "41:Left",
            State::RightS42 => "42:Right",
            State::ReduceS43 => "43:Reduce",
            State::ShiftS44 => "44:Shift",
            State::DynamicS45 => "45:Dynamic",
            State::NOPSS46 => "46:NOPS",
            State::NOPSES47 => "47:NOPSE",
            State::NameS48 => "48:Name",
            State::IntConstS49 => "49:IntConst",
            State::ProdMetaDataS50 => "50:ProdMetaData",
            State::ProdMetaDatasS51 => "51:ProdMetaDatas",
            State::UserMetaDataS52 => "52:UserMetaData",
            State::ProdKindS53 => "53:ProdKind",
            State::SemiColonS54 => "54:SemiColon",
            State::OBraceS55 => "55:OBrace",
            State::RegexTermS56 => "56:RegexTerm",
            State::StrConstS57 => "57:StrConst",
            State::RecognizerS58 => "58:Recognizer",
            State::GrammarRuleRHSS59 => "59:GrammarRuleRHS",
            State::EqualsS60 => "60:Equals",
            State::QEqualsS61 => "61:QEquals",
            State::SemiColonS62 => "62:SemiColon",
            State::ChoiceS63 => "63:Choice",
            State::OBraceS64 => "64:OBrace",
            State::AssignmentS65 => "65:Assignment",
            State::ZeroOrMoreS66 => "66:ZeroOrMore",
            State::ZeroOrMoreGreedyS67 => "67:ZeroOrMoreGreedy",
            State::OneOrMoreS68 => "68:OneOrMore",
            State::OneOrMoreGreedyS69 => "69:OneOrMoreGreedy",
            State::OptionalS70 => "70:Optional",
            State::OptionalGreedyS71 => "71:OptionalGreedy",
            State::RepetitionOperatorOptS72 => "72:RepetitionOperatorOpt",
            State::RepetitionOperatorS73 => "73:RepetitionOperator",
            State::RepetitionOperatorOpS74 => "74:RepetitionOperatorOp",
            State::RepetitionOperatorOptS75 => "75:RepetitionOperatorOpt",
            State::ColonS76 => "76:Colon",
            State::CommaS77 => "77:Comma",
            State::CBraceS78 => "78:CBrace",
            State::DynamicS79 => "79:Dynamic",
            State::PreferS80 => "80:Prefer",
            State::FinishS81 => "81:Finish",
            State::NoFinishS82 => "82:NoFinish",
            State::NameS83 => "83:Name",
            State::IntConstS84 => "84:IntConst",
            State::TermMetaDataS85 => "85:TermMetaData",
            State::TermMetaDatasS86 => "86:TermMetaDatas",
            State::UserMetaDataS87 => "87:UserMetaData",
            State::SemiColonS88 => "88:SemiColon",
            State::OBraceS89 => "89:OBrace",
            State::CBracketS90 => "90:CBracket",
            State::NameS91 => "91:Name",
            State::GrammarSymbolRefS92 => "92:GrammarSymbolRef",
            State::GrammarSymbolRefS93 => "93:GrammarSymbolRef",
            State::ProductionS94 => "94:Production",
            State::ProdMetaDatasS95 => "95:ProdMetaDatas",
            State::OSBracketS96 => "96:OSBracket",
            State::RepetitionModifiersOptS97 => "97:RepetitionModifiersOpt",
            State::RepetitionModifiersS98 => "98:RepetitionModifiers",
            State::IntConstS99 => "99:IntConst",
            State::FloatConstS100 => "100:FloatConst",
            State::BoolConstS101 => "101:BoolConst",
            State::StrConstS102 => "102:StrConst",
            State::ConstValS103 => "103:ConstVal",
            State::ProdMetaDataS104 => "104:ProdMetaData",
            State::ColonS105 => "105:Colon",
            State::CommaS106 => "106:Comma",
            State::CBraceS107 => "107:CBrace",
            State::TermMetaDatasS108 => "108:TermMetaDatas",
            State::CBraceS109 => "109:CBrace",
            State::NameS110 => "110:Name",
            State::RepetitionModifier1S111 => "111:RepetitionModifier1",
            State::RepetitionModifierS112 => "112:RepetitionModifier",
            State::GrammarRuleRHSS113 => "113:GrammarRuleRHS",
            State::TermMetaDataS114 => "114:TermMetaData",
            State::SemiColonS115 => "115:SemiColon",
            State::CBraceS116 => "116:CBrace",
            State::CommaS117 => "117:Comma",
            State::CSBracketS118 => "118:CSBracket",
            State::SemiColonS119 => "119:SemiColon",
            State::SemiColonS120 => "120:SemiColon",
            State::RepetitionModifierS121 => "121:RepetitionModifier",
            State::AUGLS122 => "122:AUGL",
            State::OCommentS123 => "123:OComment",
            State::WSS124 => "124:WS",
            State::CommentLineS125 => "125:CommentLine",
            State::LayoutS126 => "126:Layout",
            State::LayoutItem1S127 => "127:LayoutItem1",
            State::LayoutItem0S128 => "128:LayoutItem0",
            State::LayoutItemS129 => "129:LayoutItem",
            State::CommentS130 => "130:Comment",
            State::WSS131 => "131:WS",
            State::NotCommentS132 => "132:NotComment",
            State::CommentS133 => "133:Comment",
            State::CorncsS134 => "134:Corncs",
            State::Cornc1S135 => "135:Cornc1",
            State::Cornc0S136 => "136:Cornc0",
            State::CorncS137 => "137:Cornc",
            State::LayoutItemS138 => "138:LayoutItem",
            State::CCommentS139 => "139:CComment",
            State::CorncS140 => "140:Cornc",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    Terminals,
    Import,
    As,
    Colon,
    SemiColon,
    Comma,
    OBrace,
    CBrace,
    OBracket,
    CBracket,
    OSBracket,
    CSBracket,
    Choice,
    ZeroOrMore,
    ZeroOrMoreGreedy,
    OneOrMore,
    OneOrMoreGreedy,
    Optional,
    OptionalGreedy,
    Equals,
    QEquals,
    Left,
    Right,
    Reduce,
    Shift,
    Dynamic,
    NOPS,
    NOPSE,
    Prefer,
    Finish,
    NoFinish,
    Name(rustemo_actions::Name),
    RegexTerm(rustemo_actions::RegexTerm),
    IntConst(rustemo_actions::IntConst),
    FloatConst(rustemo_actions::FloatConst),
    BoolConst(rustemo_actions::BoolConst),
    StrConst(rustemo_actions::StrConst),
    Annotation(rustemo_actions::Annotation),
}
#[derive(Debug)]
pub enum NonTerminal {
    File(rustemo_actions::File),
    GrammarRule1(rustemo_actions::GrammarRule1),
    ImportStm1(rustemo_actions::ImportStm1),
    TerminalRule1(rustemo_actions::TerminalRule1),
    ImportStm(rustemo_actions::ImportStm),
    GrammarRule(rustemo_actions::GrammarRule),
    AnnotationOpt(rustemo_actions::AnnotationOpt),
    GrammarRuleRHS(rustemo_actions::GrammarRuleRHS),
    Production(rustemo_actions::Production),
    Assignment1(rustemo_actions::Assignment1),
    TerminalRule(rustemo_actions::TerminalRule),
    ProdMetaData(rustemo_actions::ProdMetaData),
    ProdMetaDatas(rustemo_actions::ProdMetaDatas),
    TermMetaData(rustemo_actions::TermMetaData),
    TermMetaDatas(rustemo_actions::TermMetaDatas),
    UserMetaData(rustemo_actions::UserMetaData),
    ProdKind(rustemo_actions::ProdKind),
    ConstVal(rustemo_actions::ConstVal),
    Assignment(rustemo_actions::Assignment),
    PlainAssignment(rustemo_actions::PlainAssignment),
    BoolAssignment(rustemo_actions::BoolAssignment),
    ProductionGroup(rustemo_actions::ProductionGroup),
    GrammarSymbolRef(rustemo_actions::GrammarSymbolRef),
    RepetitionOperatorOpt(rustemo_actions::RepetitionOperatorOpt),
    RepetitionOperator(rustemo_actions::RepetitionOperator),
    RepetitionModifiersOpt(rustemo_actions::RepetitionModifiersOpt),
    RepetitionOperatorOp(rustemo_actions::RepetitionOperatorOp),
    RepetitionModifiers(rustemo_actions::RepetitionModifiers),
    RepetitionModifier1(rustemo_actions::RepetitionModifier1),
    RepetitionModifier(rustemo_actions::RepetitionModifier),
    GrammarSymbol(rustemo_actions::GrammarSymbol),
    Recognizer(rustemo_actions::Recognizer),
}
pub struct RustemoParserDefinition {
    actions: [[Action<State, ProdKind>; TERMINAL_COUNT]; STATE_COUNT],
    gotos: [[Option<State>; NONTERMINAL_COUNT]; STATE_COUNT],
    token_recognizers: [[Option<TokenRecognizer>; 15usize]; STATE_COUNT],
}
pub(crate) static PARSER_DEFINITION: RustemoParserDefinition = RustemoParserDefinition {
    actions: [
        [
            Error,
            Shift(State::TerminalsS1),
            Shift(State::ImportS2),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS13),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Accept,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::FileP1, 1usize),
            Shift(State::TerminalsS14),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(State::ImportS2),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Reduce(ProdKind::ImportStm1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStm1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStm1P2, 1usize),
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::GrammarRule1P2, 1usize),
            Reduce(ProdKind::GrammarRule1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRule1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRule1P2, 1usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS18),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::FileP5, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS20),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::TerminalRule1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRule1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRule1P2, 1usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Reduce(ProdKind::ImportStmP1, 2usize),
            Shift(State::AsS21),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStmP1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStmP1, 2usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::GrammarRule1P1, 2usize),
            Reduce(ProdKind::GrammarRule1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRule1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRule1P1, 2usize),
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::FileP2, 2usize),
            Shift(State::TerminalsS23),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Reduce(ProdKind::ImportStm1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStm1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStm1P1, 2usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Shift(State::ColonS24),
            Error,
            Error,
            Shift(State::OBraceS25),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::TerminalRule1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRule1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRule1P1, 2usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Shift(State::ColonS26),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS27),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::FileP3, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OBracketS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS30),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::LeftS41),
            Shift(State::RightS42),
            Shift(State::ReduceS43),
            Shift(State::ShiftS44),
            Shift(State::DynamicS45),
            Shift(State::NOPSS46),
            Shift(State::NOPSES47),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS48),
            Error,
            Shift(State::IntConstS49),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::SemiColonS54),
            Error,
            Shift(State::OBraceS55),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::RegexTermS56),
            Error,
            Error,
            Error,
            Shift(State::StrConstS57),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Reduce(ProdKind::ImportStmP2, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStmP2, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ImportStmP2, 4usize),
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::FileP4, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AnnotationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::AnnotationS3),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OBracketS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS30),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Shift(State::EqualsS60),
            Shift(State::QEqualsS61),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Error,
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Error,
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP2, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::SemiColonS62),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::ChoiceS63),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleRHSP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleRHSP2, 1usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleRHSP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProductionP1, 1usize),
            Error,
            Shift(State::OBraceS64),
            Error,
            Shift(State::OBracketS29),
            Reduce(ProdKind::ProductionP1, 1usize),
            Error,
            Error,
            Reduce(ProdKind::ProductionP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS30),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Assignment1P2, 1usize),
            Error,
            Reduce(ProdKind::Assignment1P2, 1usize),
            Error,
            Reduce(ProdKind::Assignment1P2, 1usize),
            Reduce(ProdKind::Assignment1P2, 1usize),
            Error,
            Error,
            Reduce(ProdKind::Assignment1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Assignment1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Assignment1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP1, 1usize),
            Error,
            Reduce(ProdKind::AssignmentP1, 1usize),
            Error,
            Reduce(ProdKind::AssignmentP1, 1usize),
            Reduce(ProdKind::AssignmentP1, 1usize),
            Error,
            Error,
            Reduce(ProdKind::AssignmentP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP1, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP2, 1usize),
            Error,
            Reduce(ProdKind::AssignmentP2, 1usize),
            Error,
            Reduce(ProdKind::AssignmentP2, 1usize),
            Reduce(ProdKind::AssignmentP2, 1usize),
            Error,
            Error,
            Reduce(ProdKind::AssignmentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Shift(State::ZeroOrMoreS66),
            Shift(State::ZeroOrMoreGreedyS67),
            Shift(State::OneOrMoreS68),
            Shift(State::OneOrMoreGreedyS69),
            Shift(State::OptionalS70),
            Shift(State::OptionalGreedyS71),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP3, 1usize),
            Error,
            Reduce(ProdKind::AssignmentP3, 1usize),
            Error,
            Reduce(ProdKind::AssignmentP3, 1usize),
            Reduce(ProdKind::AssignmentP3, 1usize),
            Error,
            Error,
            Reduce(ProdKind::AssignmentP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::AssignmentP3, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Shift(State::ZeroOrMoreS66),
            Shift(State::ZeroOrMoreGreedyS67),
            Shift(State::OneOrMoreS68),
            Shift(State::OneOrMoreGreedyS69),
            Shift(State::OptionalS70),
            Shift(State::OptionalGreedyS71),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataLeft, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataLeft, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataRight, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataRight, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataReduce, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataReduce, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataShift, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataShift, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataDynamic, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataDynamic, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataNOPS, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataNOPS, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataNOPSE, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataNOPSE, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Shift(State::ColonS76),
            Error,
            Reduce(ProdKind::ProdKindP1, 1usize),
            Error,
            Reduce(ProdKind::ProdKindP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataPriority, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataPriority, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDatasP2, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDatasP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommaS77),
            Error,
            Shift(State::CBraceS78),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataP9, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataP9, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDataP10, 1usize),
            Error,
            Reduce(ProdKind::ProdMetaDataP10, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::TerminalRuleP2, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP2, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP2, 4usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::DynamicS79),
            Error,
            Error,
            Shift(State::PreferS80),
            Shift(State::FinishS81),
            Shift(State::NoFinishS82),
            Error,
            Error,
            Shift(State::NameS83),
            Error,
            Shift(State::IntConstS84),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RecognizerP2, 1usize),
            Error,
            Reduce(ProdKind::RecognizerP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RecognizerP1, 1usize),
            Error,
            Reduce(ProdKind::RecognizerP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::SemiColonS88),
            Error,
            Shift(State::OBraceS89),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CBracketS90),
            Error,
            Error,
            Shift(State::ChoiceS63),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OBracketS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS91),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OBracketS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS91),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::GrammarRuleP1, 5usize),
            Reduce(ProdKind::GrammarRuleP1, 5usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleP1, 5usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleP1, 5usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OBracketS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS30),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::LeftS41),
            Shift(State::RightS42),
            Shift(State::ReduceS43),
            Shift(State::ShiftS44),
            Shift(State::DynamicS45),
            Shift(State::NOPSS46),
            Shift(State::NOPSES47),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS48),
            Error,
            Shift(State::IntConstS49),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Assignment1P1, 2usize),
            Error,
            Reduce(ProdKind::Assignment1P1, 2usize),
            Error,
            Reduce(ProdKind::Assignment1P1, 2usize),
            Reduce(ProdKind::Assignment1P1, 2usize),
            Error,
            Error,
            Reduce(ProdKind::Assignment1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Assignment1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Assignment1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMore, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpZeroOrMoreGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMore, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOneOrMoreGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptional, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOpOptionalGreedy, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Error,
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Error,
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP2, 2usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Shift(State::OSBracketS96),
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Error,
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Error,
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolRefP1, 2usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::IntConstS99),
            Shift(State::FloatConstS100),
            Shift(State::BoolConstS101),
            Shift(State::StrConstS102),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::LeftS41),
            Shift(State::RightS42),
            Shift(State::ReduceS43),
            Shift(State::ShiftS44),
            Shift(State::DynamicS45),
            Shift(State::NOPSS46),
            Shift(State::NOPSES47),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS48),
            Error,
            Shift(State::IntConstS49),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Shift(State::ColonS105),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDataDynamic, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDataDynamic, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDataPrefer, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDataPrefer, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDataFinish, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDataFinish, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDataNoFinish, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDataNoFinish, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Shift(State::ColonS76),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDataPriority, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDataPriority, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDatasP2, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDatasP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommaS106),
            Error,
            Shift(State::CBraceS107),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDataP6, 1usize),
            Error,
            Reduce(ProdKind::TermMetaDataP6, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::TerminalRuleP1, 5usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP1, 5usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP1, 5usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::DynamicS79),
            Error,
            Error,
            Shift(State::PreferS80),
            Shift(State::FinishS81),
            Shift(State::NoFinishS82),
            Error,
            Error,
            Shift(State::NameS83),
            Error,
            Shift(State::IntConstS84),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Error,
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Error,
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Error,
            Error,
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProductionGroupP1, 3usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarSymbolP1, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Error,
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Error,
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Error,
            Error,
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::PlainAssignmentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Error,
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Error,
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Error,
            Error,
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::BoolAssignmentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleRHSP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleRHSP1, 3usize),
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleRHSP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommaS77),
            Error,
            Shift(State::CBraceS109),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS110),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Error,
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionOperatorP1, 2usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ConstValP1, 1usize),
            Error,
            Reduce(ProdKind::ConstValP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ConstValP2, 1usize),
            Error,
            Reduce(ProdKind::ConstValP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ConstValP3, 1usize),
            Error,
            Reduce(ProdKind::ConstValP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ConstValP4, 1usize),
            Error,
            Reduce(ProdKind::ConstValP4, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::UserMetaDataP1, 3usize),
            Error,
            Reduce(ProdKind::UserMetaDataP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProdMetaDatasP1, 3usize),
            Error,
            Reduce(ProdKind::ProdMetaDatasP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OBracketS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS30),
            Error,
            Error,
            Error,
            Error,
            Shift(State::StrConstS31),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::DynamicS79),
            Error,
            Error,
            Shift(State::PreferS80),
            Shift(State::FinishS81),
            Shift(State::NoFinishS82),
            Error,
            Error,
            Shift(State::NameS83),
            Error,
            Shift(State::IntConstS84),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::SemiColonS115),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommaS106),
            Error,
            Shift(State::CBraceS116),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProductionP2, 4usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ProductionP2, 4usize),
            Error,
            Error,
            Reduce(ProdKind::ProductionP2, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifierP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifierP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommaS117),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CSBracketS118),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifier1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifier1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::SemiColonS119),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::ChoiceS63),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TermMetaDatasP1, 3usize),
            Error,
            Reduce(ProdKind::TermMetaDatasP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::TerminalRuleP4, 7usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP4, 7usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP4, 7usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::SemiColonS120),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS110),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Error,
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Error,
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifiersP1, 3usize),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::GrammarRuleP2, 8usize),
            Reduce(ProdKind::GrammarRuleP2, 8usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleP2, 8usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::GrammarRuleP2, 8usize),
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::TerminalRuleP3, 8usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP3, 8usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TerminalRuleP3, 8usize),
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifier1P1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::RepetitionModifier1P1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItem0P2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OCommentS123),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::WSS124),
            Shift(State::CommentLineS125),
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OCommentS123),
            Reduce(ProdKind::Cornc0P2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::WSS131),
            Shift(State::CommentLineS125),
            Shift(State::NotCommentS132),
        ],
        [
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
        ],
        [
            Reduce(ProdKind::CommentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
        ],
        [
            Accept,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItem0P1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OCommentS123),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::WSS124),
            Shift(State::CommentLineS125),
            Error,
        ],
        [
            Reduce(ProdKind::LayoutP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP3, 1usize),
            Reduce(ProdKind::CorncP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP3, 1usize),
            Reduce(ProdKind::CorncP3, 1usize),
            Reduce(ProdKind::CorncP3, 1usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP2, 1usize),
            Reduce(ProdKind::CorncP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP2, 1usize),
            Reduce(ProdKind::CorncP2, 1usize),
            Reduce(ProdKind::CorncP2, 1usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP1, 1usize),
            Reduce(ProdKind::CorncP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP1, 1usize),
            Reduce(ProdKind::CorncP1, 1usize),
            Reduce(ProdKind::CorncP1, 1usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CCommentS139),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::OCommentS123),
            Reduce(ProdKind::Cornc0P1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::WSS131),
            Shift(State::CommentLineS125),
            Shift(State::NotCommentS132),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncsP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Cornc1P2, 1usize),
            Reduce(ProdKind::Cornc1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Cornc1P2, 1usize),
            Reduce(ProdKind::Cornc1P2, 1usize),
            Reduce(ProdKind::Cornc1P2, 1usize),
        ],
        [
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
        ],
        [
            Reduce(ProdKind::CommentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Cornc1P1, 2usize),
            Reduce(ProdKind::Cornc1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Cornc1P1, 2usize),
            Reduce(ProdKind::Cornc1P1, 2usize),
            Reduce(ProdKind::Cornc1P1, 2usize),
        ],
    ],
    gotos: [
        [
            None,
            None,
            None,
            Some(State::FileS4),
            Some(State::GrammarRule1S5),
            Some(State::ImportStm1S6),
            None,
            Some(State::ImportStmS7),
            Some(State::GrammarRuleS8),
            Some(State::AnnotationOptS9),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TerminalRule1S10),
            None,
            None,
            Some(State::AnnotationOptS11),
            None,
            None,
            None,
            Some(State::TerminalRuleS12),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarRuleS15),
            Some(State::AnnotationOptS9),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            Some(State::GrammarRule1S16),
            None,
            None,
            Some(State::ImportStmS17),
            Some(State::GrammarRuleS8),
            Some(State::AnnotationOptS9),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AnnotationOptS11),
            None,
            None,
            None,
            Some(State::TerminalRuleS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TerminalRule1S22),
            None,
            None,
            Some(State::AnnotationOptS11),
            None,
            None,
            None,
            Some(State::TerminalRuleS12),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarRuleS15),
            Some(State::AnnotationOptS9),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AnnotationOptS11),
            None,
            None,
            None,
            Some(State::TerminalRuleS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TerminalRule1S28),
            None,
            None,
            Some(State::AnnotationOptS11),
            None,
            None,
            None,
            Some(State::TerminalRuleS12),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarRuleRHSS32),
            Some(State::ProductionS33),
            Some(State::Assignment1S34),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AssignmentS35),
            Some(State::PlainAssignmentS36),
            Some(State::BoolAssignmentS37),
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS39),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ProdMetaDataS50),
            Some(State::ProdMetaDatasS51),
            None,
            None,
            Some(State::UserMetaDataS52),
            Some(State::ProdKindS53),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::RecognizerS58),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AnnotationOptS11),
            None,
            None,
            None,
            Some(State::TerminalRuleS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarRuleRHSS59),
            Some(State::ProductionS33),
            Some(State::Assignment1S34),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AssignmentS35),
            Some(State::PlainAssignmentS36),
            Some(State::BoolAssignmentS37),
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS39),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AssignmentS65),
            Some(State::PlainAssignmentS36),
            Some(State::BoolAssignmentS37),
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS39),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::RepetitionOperatorOptS72),
            Some(State::RepetitionOperatorS73),
            None,
            Some(State::RepetitionOperatorOpS74),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::RepetitionOperatorOptS75),
            Some(State::RepetitionOperatorS73),
            None,
            Some(State::RepetitionOperatorOpS74),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TermMetaDataS85),
            Some(State::TermMetaDatasS86),
            Some(State::UserMetaDataS87),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS92),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS93),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ProductionS94),
            Some(State::Assignment1S34),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AssignmentS35),
            Some(State::PlainAssignmentS36),
            Some(State::BoolAssignmentS37),
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS39),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ProdMetaDataS50),
            Some(State::ProdMetaDatasS95),
            None,
            None,
            Some(State::UserMetaDataS52),
            Some(State::ProdKindS53),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::RepetitionModifiersOptS97),
            None,
            Some(State::RepetitionModifiersS98),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ConstValS103),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ProdMetaDataS104),
            None,
            None,
            None,
            Some(State::UserMetaDataS52),
            Some(State::ProdKindS53),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TermMetaDataS85),
            Some(State::TermMetaDatasS108),
            Some(State::UserMetaDataS87),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::RepetitionModifier1S111),
            Some(State::RepetitionModifierS112),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarRuleRHSS113),
            Some(State::ProductionS33),
            Some(State::Assignment1S34),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::AssignmentS35),
            Some(State::PlainAssignmentS36),
            Some(State::BoolAssignmentS37),
            Some(State::ProductionGroupS38),
            Some(State::GrammarSymbolRefS39),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::GrammarSymbolS40),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TermMetaDataS114),
            None,
            Some(State::UserMetaDataS87),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::RepetitionModifierS121),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::LayoutS126),
            Some(State::LayoutItem1S127),
            Some(State::LayoutItem0S128),
            Some(State::LayoutItemS129),
            Some(State::CommentS130),
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::CommentS133),
            Some(State::CorncsS134),
            Some(State::Cornc1S135),
            Some(State::Cornc0S136),
            Some(State::CorncS137),
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::LayoutItemS138),
            Some(State::CommentS130),
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::CommentS133),
            None,
            None,
            None,
            Some(State::CorncS140),
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
    token_recognizers: [
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Import,
                recognizer: Recognizer::StrMatch("import"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Import,
                recognizer: Recognizer::StrMatch("import"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Import,
                recognizer: Recognizer::StrMatch("import"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Import,
                recognizer: Recognizer::StrMatch("import"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::As,
                recognizer: Recognizer::StrMatch("as"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Import,
                recognizer: Recognizer::StrMatch("import"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Colon,
                recognizer: Recognizer::StrMatch(":"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Colon,
                recognizer: Recognizer::StrMatch(":"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Dynamic,
                recognizer: Recognizer::StrMatch("dynamic"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Reduce,
                recognizer: Recognizer::StrMatch("reduce"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Right,
                recognizer: Recognizer::StrMatch("right"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Shift,
                recognizer: Recognizer::StrMatch("shift"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NOPSE,
                recognizer: Recognizer::StrMatch("nopse"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Left,
                recognizer: Recognizer::StrMatch("left"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NOPS,
                recognizer: Recognizer::StrMatch("nops"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::RegexTerm,
                recognizer: Recognizer::RegexMatch(35usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Import,
                recognizer: Recognizer::StrMatch("import"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMoreGreedy,
                recognizer: Recognizer::StrMatch("*!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMoreGreedy,
                recognizer: Recognizer::StrMatch("+!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OptionalGreedy,
                recognizer: Recognizer::StrMatch("?!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::QEquals,
                recognizer: Recognizer::StrMatch("?="),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMore,
                recognizer: Recognizer::StrMatch("*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMore,
                recognizer: Recognizer::StrMatch("+"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Optional,
                recognizer: Recognizer::StrMatch("?"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Equals,
                recognizer: Recognizer::StrMatch("="),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMoreGreedy,
                recognizer: Recognizer::StrMatch("*!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMoreGreedy,
                recognizer: Recognizer::StrMatch("+!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OptionalGreedy,
                recognizer: Recognizer::StrMatch("?!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMore,
                recognizer: Recognizer::StrMatch("*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMore,
                recognizer: Recognizer::StrMatch("+"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Optional,
                recognizer: Recognizer::StrMatch("?"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMoreGreedy,
                recognizer: Recognizer::StrMatch("*!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMoreGreedy,
                recognizer: Recognizer::StrMatch("+!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OptionalGreedy,
                recognizer: Recognizer::StrMatch("?!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMore,
                recognizer: Recognizer::StrMatch("*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMore,
                recognizer: Recognizer::StrMatch("+"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Optional,
                recognizer: Recognizer::StrMatch("?"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMoreGreedy,
                recognizer: Recognizer::StrMatch("*!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMoreGreedy,
                recognizer: Recognizer::StrMatch("+!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OptionalGreedy,
                recognizer: Recognizer::StrMatch("?!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMore,
                recognizer: Recognizer::StrMatch("*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMore,
                recognizer: Recognizer::StrMatch("+"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Optional,
                recognizer: Recognizer::StrMatch("?"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Colon,
                recognizer: Recognizer::StrMatch(":"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::NoFinish,
                recognizer: Recognizer::StrMatch("nofinish"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Dynamic,
                recognizer: Recognizer::StrMatch("dynamic"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Prefer,
                recognizer: Recognizer::StrMatch("prefer"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Finish,
                recognizer: Recognizer::StrMatch("finish"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Dynamic,
                recognizer: Recognizer::StrMatch("dynamic"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Reduce,
                recognizer: Recognizer::StrMatch("reduce"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Right,
                recognizer: Recognizer::StrMatch("right"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Shift,
                recognizer: Recognizer::StrMatch("shift"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NOPSE,
                recognizer: Recognizer::StrMatch("nopse"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Left,
                recognizer: Recognizer::StrMatch("left"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NOPS,
                recognizer: Recognizer::StrMatch("nops"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OSBracket,
                recognizer: Recognizer::StrMatch("["),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::FloatConst,
                recognizer: Recognizer::RegexMatch(37usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::BoolConst,
                recognizer: Recognizer::RegexMatch(38usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Dynamic,
                recognizer: Recognizer::StrMatch("dynamic"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Reduce,
                recognizer: Recognizer::StrMatch("reduce"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Right,
                recognizer: Recognizer::StrMatch("right"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Shift,
                recognizer: Recognizer::StrMatch("shift"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NOPSE,
                recognizer: Recognizer::StrMatch("nopse"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Left,
                recognizer: Recognizer::StrMatch("left"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NOPS,
                recognizer: Recognizer::StrMatch("nops"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Colon,
                recognizer: Recognizer::StrMatch(":"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Colon,
                recognizer: Recognizer::StrMatch(":"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::NoFinish,
                recognizer: Recognizer::StrMatch("nofinish"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Dynamic,
                recognizer: Recognizer::StrMatch("dynamic"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Prefer,
                recognizer: Recognizer::StrMatch("prefer"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Finish,
                recognizer: Recognizer::StrMatch("finish"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMoreGreedy,
                recognizer: Recognizer::StrMatch("*!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMoreGreedy,
                recognizer: Recognizer::StrMatch("+!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OptionalGreedy,
                recognizer: Recognizer::StrMatch("?!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMore,
                recognizer: Recognizer::StrMatch("*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMore,
                recognizer: Recognizer::StrMatch("+"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Optional,
                recognizer: Recognizer::StrMatch("?"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMoreGreedy,
                recognizer: Recognizer::StrMatch("*!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMoreGreedy,
                recognizer: Recognizer::StrMatch("+!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OptionalGreedy,
                recognizer: Recognizer::StrMatch("?!"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ZeroOrMore,
                recognizer: Recognizer::StrMatch("*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OneOrMore,
                recognizer: Recognizer::StrMatch("+"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Optional,
                recognizer: Recognizer::StrMatch("?"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::NoFinish,
                recognizer: Recognizer::StrMatch("nofinish"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Dynamic,
                recognizer: Recognizer::StrMatch("dynamic"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Prefer,
                recognizer: Recognizer::StrMatch("prefer"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Finish,
                recognizer: Recognizer::StrMatch("finish"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::IntConst,
                recognizer: Recognizer::RegexMatch(36usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CSBracket,
                recognizer: Recognizer::StrMatch("]"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CSBracket,
                recognizer: Recognizer::StrMatch("]"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CSBracket,
                recognizer: Recognizer::StrMatch("]"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
                recognizer: Recognizer::StrMatch("}"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::SemiColon,
                recognizer: Recognizer::StrMatch(";"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
                recognizer: Recognizer::StrMatch("{"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OBracket,
                recognizer: Recognizer::StrMatch("("),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBracket,
                recognizer: Recognizer::StrMatch(")"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Choice,
                recognizer: Recognizer::StrMatch("|"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StrConst,
                recognizer: Recognizer::RegexMatch(39usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Terminals,
                recognizer: Recognizer::StrMatch("terminals"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
                recognizer: Recognizer::RegexMatch(34usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Annotation,
                recognizer: Recognizer::RegexMatch(40usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Comma,
                recognizer: Recognizer::StrMatch(","),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CSBracket,
                recognizer: Recognizer::StrMatch("]"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
                recognizer: Recognizer::StrMatch("/*"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
                recognizer: Recognizer::StrMatch("*/"),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
                recognizer: Recognizer::RegexMatch(41usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
                recognizer: Recognizer::RegexMatch(42usize),
                finish: true,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
                recognizer: Recognizer::RegexMatch(43usize),
                finish: true,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
};
impl ParserDefinition<TokenRecognizer, State, ProdKind, TokenKind, NonTermKind>
for RustemoParserDefinition {
    fn action(&self, state: State, token: TokenKind) -> Action<State, ProdKind> {
        PARSER_DEFINITION.actions[state as usize][token as usize]
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize][nonterm as usize].unwrap()
    }
    fn recognizers(&self, state: State) -> Vec<&TokenRecognizer> {
        PARSER_DEFINITION
            .token_recognizers[state as usize]
            .iter()
            .map_while(|tr| tr.as_ref())
            .collect()
    }
}
#[derive(Default)]
pub struct RustemoParser {
    content: Option<<Input as ToOwned>::Owned>,
}
#[allow(dead_code)]
impl<'i> RustemoParser {
    pub fn new() -> Self {
        Self { content: None }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse_file<P: AsRef<std::path::Path>>(
        &'i mut self,
        file: P,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        self.content = Some(<Input as rustemo::lexer::Input>::read_file(&file)?);
        let mut context = Context::new(
            file.as_ref().to_string_lossy().to_string(),
            self.content.as_ref().unwrap(),
        );
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse(
        &self,
        input: &'i Input,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let mut context = Context::new("<str>".to_string(), input);
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    fn inner_parse(
        &self,
        context: &mut Context<'i>,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let local_lexer = StringLexer::new(false);
        let lexer = &local_lexer;
        let mut local_builder = DefaultBuilder::new();
        let builder = &mut local_builder;
        let mut parser = LRParser::new(&PARSER_DEFINITION, State::AUGS0, false);
        loop {
            log!("\n{}", "*** Parsing content".red().bold());
            let result = parser.parse(context, lexer, builder);
            if result.is_err() {
                let pos = context.position;
                log!("\n{}", "*** Parsing layout".red().bold());
                let mut builder = SliceBuilder::new();
                context
                    .layout_ahead = <LRParser<
                    State,
                    ProdKind,
                    TokenKind,
                    NonTermKind,
                    RustemoParserDefinition,
                    TokenRecognizer,
                > as rustemo::parser::Parser<
                    '_,
                    Input,
                    StringLexer,
                    SliceBuilder<'_, Input>,
                    TokenRecognizer,
                >>::parse(
                        &mut RustemoLayoutParser::default().0,
                        context,
                        lexer,
                        &mut builder,
                    )
                    .unwrap_or_default();
                if context.position > pos {
                    continue;
                }
            }
            return result;
        }
    }
}
pub struct RustemoLayoutParser(
    LRParser<
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        RustemoParserDefinition,
        TokenRecognizer,
    >,
);
impl Default for RustemoLayoutParser {
    fn default() -> Self {
        Self(LRParser::new(&PARSER_DEFINITION, State::AUGLS122, true))
    }
}
pub(crate) static RECOGNIZERS: [Option<Lazy<Regex>>; TERMINAL_COUNT] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(
        Lazy::new(|| { Regex::new(concat!("^", "[a-zA-Z_][a-zA-Z0-9_\\.]*")).unwrap() }),
    ),
    Some(Lazy::new(|| { Regex::new(concat!("^", "/(\\\\.|[^/\\\\])*/")).unwrap() })),
    Some(Lazy::new(|| { Regex::new(concat!("^", "\\d+")).unwrap() })),
    Some(
        Lazy::new(|| {
            Regex::new(concat!("^", "[+-]?[0-9]+[.][0-9]*([e][+-]?[0-9]+)?")).unwrap()
        }),
    ),
    Some(Lazy::new(|| { Regex::new(concat!("^", "true|false")).unwrap() })),
    Some(
        Lazy::new(|| {
            Regex::new(
                    concat!(
                        "^",
                        "(?s)(^'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')|(^\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")"
                    ),
                )
                .unwrap()
        }),
    ),
    Some(Lazy::new(|| { Regex::new(concat!("^", "@[a-zA-Z0-9_]+")).unwrap() })),
    Some(Lazy::new(|| { Regex::new(concat!("^", "\\s+")).unwrap() })),
    Some(Lazy::new(|| { Regex::new(concat!("^", "//.*")).unwrap() })),
    Some(
        Lazy::new(|| {
            Regex::new(concat!("^", "((\\*[^/])|[^\\s*/]|/[^\\*])+")).unwrap()
        }),
    ),
];
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(usize),
}
#[derive(Debug)]
pub struct TokenRecognizer {
    token_kind: TokenKind,
    recognizer: Recognizer,
    finish: bool,
}
impl lexer::TokenRecognizer for TokenRecognizer {
    type TokenKind = TokenKind;
    type Input = str;
    fn recognize<'i>(&self, input: &'i str) -> Option<&'i str> {
        match &self.recognizer {
            Recognizer::StrMatch(s) => {
                logn!("{} <{:?}> --", "\tRecognizing".green(), self.token_kind());
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            Recognizer::RegexMatch(r) => {
                logn!("{} <{:?}> --", "\tRecognizing".green(), self.token_kind());
                let match_str = RECOGNIZERS[*r].as_ref().unwrap().find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} <{}>", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    None => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            Recognizer::Stop => {
                logn!("{}  <STOP> -- ", "\tRecognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
    #[inline]
    fn token_kind(&self) -> TokenKind {
        self.token_kind
    }
    #[inline]
    fn finish(&self) -> bool {
        self.finish
    }
}
impl PartialEq for TokenRecognizer {
    fn eq(&self, other: &Self) -> bool {
        self.token_kind == other.token_kind
    }
}
impl Eq for TokenRecognizer {}
impl Hash for TokenRecognizer {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.token_kind.hash(state);
    }
}
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl Builder for DefaultBuilder {
    type Output = rustemo_actions::File;
    fn new() -> Self {
        Self { res_stack: vec![] }
    }
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::File(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, ProdKind, TokenKind> for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::Terminals => Terminal::Terminals,
            TokenKind::Import => Terminal::Import,
            TokenKind::As => Terminal::As,
            TokenKind::Colon => Terminal::Colon,
            TokenKind::SemiColon => Terminal::SemiColon,
            TokenKind::Comma => Terminal::Comma,
            TokenKind::OBrace => Terminal::OBrace,
            TokenKind::CBrace => Terminal::CBrace,
            TokenKind::OBracket => Terminal::OBracket,
            TokenKind::CBracket => Terminal::CBracket,
            TokenKind::OSBracket => Terminal::OSBracket,
            TokenKind::CSBracket => Terminal::CSBracket,
            TokenKind::Choice => Terminal::Choice,
            TokenKind::ZeroOrMore => Terminal::ZeroOrMore,
            TokenKind::ZeroOrMoreGreedy => Terminal::ZeroOrMoreGreedy,
            TokenKind::OneOrMore => Terminal::OneOrMore,
            TokenKind::OneOrMoreGreedy => Terminal::OneOrMoreGreedy,
            TokenKind::Optional => Terminal::Optional,
            TokenKind::OptionalGreedy => Terminal::OptionalGreedy,
            TokenKind::Equals => Terminal::Equals,
            TokenKind::QEquals => Terminal::QEquals,
            TokenKind::Left => Terminal::Left,
            TokenKind::Right => Terminal::Right,
            TokenKind::Reduce => Terminal::Reduce,
            TokenKind::Shift => Terminal::Shift,
            TokenKind::Dynamic => Terminal::Dynamic,
            TokenKind::NOPS => Terminal::NOPS,
            TokenKind::NOPSE => Terminal::NOPSE,
            TokenKind::Prefer => Terminal::Prefer,
            TokenKind::Finish => Terminal::Finish,
            TokenKind::NoFinish => Terminal::NoFinish,
            TokenKind::Name => Terminal::Name(rustemo_actions::name(context, token)),
            TokenKind::RegexTerm => {
                Terminal::RegexTerm(rustemo_actions::regex_term(context, token))
            }
            TokenKind::IntConst => {
                Terminal::IntConst(rustemo_actions::int_const(context, token))
            }
            TokenKind::FloatConst => {
                Terminal::FloatConst(rustemo_actions::float_const(context, token))
            }
            TokenKind::BoolConst => {
                Terminal::BoolConst(rustemo_actions::bool_const(context, token))
            }
            TokenKind::StrConst => {
                Terminal::StrConst(rustemo_actions::str_const(context, token))
            }
            TokenKind::Annotation => {
                Terminal::Annotation(rustemo_actions::annotation(context, token))
            }
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::FileP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::GrammarRule1(p0)) => {
                        NonTerminal::File(
                            rustemo_actions::file_grammar_rule1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarRule1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::GrammarRule1(p0)),
                        Symbol::NonTerminal(NonTerminal::GrammarRule(p1)),
                    ) => {
                        NonTerminal::GrammarRule1(
                            rustemo_actions::grammar_rule1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarRule1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::GrammarRule(p0)) => {
                        NonTerminal::GrammarRule1(
                            rustemo_actions::grammar_rule1_grammar_rule(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FileP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ImportStm1(p0)),
                        Symbol::NonTerminal(NonTerminal::GrammarRule1(p1)),
                    ) => NonTerminal::File(rustemo_actions::file_c2(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ImportStm1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ImportStm1(p0)),
                        Symbol::NonTerminal(NonTerminal::ImportStm(p1)),
                    ) => {
                        NonTerminal::ImportStm1(
                            rustemo_actions::import_stm1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ImportStm1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ImportStm(p0)) => {
                        NonTerminal::ImportStm1(
                            rustemo_actions::import_stm1_import_stm(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FileP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::GrammarRule1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TerminalRule1(p1)),
                    ) => NonTerminal::File(rustemo_actions::file_c3(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TerminalRule1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TerminalRule1(p0)),
                        Symbol::NonTerminal(NonTerminal::TerminalRule(p1)),
                    ) => {
                        NonTerminal::TerminalRule1(
                            rustemo_actions::terminal_rule1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TerminalRule1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TerminalRule(p0)) => {
                        NonTerminal::TerminalRule1(
                            rustemo_actions::terminal_rule1_terminal_rule(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FileP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::ImportStm1(p0)),
                        Symbol::NonTerminal(NonTerminal::GrammarRule1(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TerminalRule1(p2)),
                    ) => NonTerminal::File(rustemo_actions::file_c4(context, p0, p1, p2)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FileP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::TerminalRule1(p0))) => {
                        NonTerminal::File(
                            rustemo_actions::file_terminal_rule1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ImportStmP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::StrConst(p0))) => {
                        NonTerminal::ImportStm(
                            rustemo_actions::import_stm_c1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ImportStmP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::Terminal(Terminal::StrConst(p0)),
                        _,
                        Symbol::Terminal(Terminal::Name(p1)),
                    ) => {
                        NonTerminal::ImportStm(
                            rustemo_actions::import_stm_c2(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarRuleP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::AnnotationOpt(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p2)),
                        _,
                    ) => {
                        NonTerminal::GrammarRule(
                            rustemo_actions::grammar_rule_c1(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AnnotationOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Annotation(p0)) => {
                        NonTerminal::AnnotationOpt(
                            rustemo_actions::annotation_opt_annotation(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AnnotationOptP2 => {
                NonTerminal::AnnotationOpt(
                    rustemo_actions::annotation_opt_empty(context),
                )
            }
            ProdKind::GrammarRuleP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 8usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::AnnotationOpt(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p2)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p3)),
                        _,
                    ) => {
                        NonTerminal::GrammarRule(
                            rustemo_actions::grammar_rule_c2(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarRuleRHSP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Production(p1)),
                    ) => {
                        NonTerminal::GrammarRuleRHS(
                            rustemo_actions::grammar_rule_rhs_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarRuleRHSP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Production(p0)) => {
                        NonTerminal::GrammarRuleRHS(
                            rustemo_actions::grammar_rule_rhs_production(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProductionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Assignment1(p0)) => {
                        NonTerminal::Production(
                            rustemo_actions::production_assignment1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Assignment1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Assignment1(p0)),
                        Symbol::NonTerminal(NonTerminal::Assignment(p1)),
                    ) => {
                        NonTerminal::Assignment1(
                            rustemo_actions::assignment1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Assignment1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Assignment(p0)) => {
                        NonTerminal::Assignment1(
                            rustemo_actions::assignment1_assignment(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProductionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::Assignment1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p1)),
                        _,
                    ) => {
                        NonTerminal::Production(
                            rustemo_actions::production_c2(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TerminalRuleP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::AnnotationOpt(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Recognizer(p2)),
                        _,
                    ) => {
                        NonTerminal::TerminalRule(
                            rustemo_actions::terminal_rule_c1(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TerminalRuleP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::AnnotationOpt(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        _,
                        _,
                    ) => {
                        NonTerminal::TerminalRule(
                            rustemo_actions::terminal_rule_c2(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TerminalRuleP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 8usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::AnnotationOpt(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Recognizer(p2)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TermMetaDatas(p3)),
                        _,
                        _,
                    ) => {
                        NonTerminal::TerminalRule(
                            rustemo_actions::terminal_rule_c3(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TerminalRuleP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::AnnotationOpt(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::TermMetaDatas(p2)),
                        _,
                        _,
                    ) => {
                        NonTerminal::TerminalRule(
                            rustemo_actions::terminal_rule_c4(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProdMetaDataLeft => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_left(context))
            }
            ProdKind::ProdMetaDataReduce => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(
                    rustemo_actions::prod_meta_data_reduce(context),
                )
            }
            ProdKind::ProdMetaDataRight => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_right(context))
            }
            ProdKind::ProdMetaDataShift => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_shift(context))
            }
            ProdKind::ProdMetaDataDynamic => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(
                    rustemo_actions::prod_meta_data_dynamic(context),
                )
            }
            ProdKind::ProdMetaDataNOPS => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_nops(context))
            }
            ProdKind::ProdMetaDataNOPSE => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ProdMetaData(rustemo_actions::prod_meta_data_nopse(context))
            }
            ProdKind::ProdMetaDataPriority => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IntConst(p0)) => {
                        NonTerminal::ProdMetaData(
                            rustemo_actions::prod_meta_data_priority(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProdMetaDataP9 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::UserMetaData(p0)) => {
                        NonTerminal::ProdMetaData(
                            rustemo_actions::prod_meta_data_user_meta_data(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProdMetaDataP10 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ProdKind(p0)) => {
                        NonTerminal::ProdMetaData(
                            rustemo_actions::prod_meta_data_prod_kind(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProdMetaDatasP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ProdMetaDatas(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ProdMetaData(p1)),
                    ) => {
                        NonTerminal::ProdMetaDatas(
                            rustemo_actions::prod_meta_datas_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProdMetaDatasP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ProdMetaData(p0)) => {
                        NonTerminal::ProdMetaDatas(
                            rustemo_actions::prod_meta_datas_c2(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermMetaDataPrefer => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TermMetaData(
                    rustemo_actions::term_meta_data_prefer(context),
                )
            }
            ProdKind::TermMetaDataFinish => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TermMetaData(
                    rustemo_actions::term_meta_data_finish(context),
                )
            }
            ProdKind::TermMetaDataNoFinish => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TermMetaData(
                    rustemo_actions::term_meta_data_no_finish(context),
                )
            }
            ProdKind::TermMetaDataDynamic => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TermMetaData(
                    rustemo_actions::term_meta_data_dynamic(context),
                )
            }
            ProdKind::TermMetaDataPriority => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IntConst(p0)) => {
                        NonTerminal::TermMetaData(
                            rustemo_actions::term_meta_data_priority(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermMetaDataP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::UserMetaData(p0)) => {
                        NonTerminal::TermMetaData(
                            rustemo_actions::term_meta_data_user_meta_data(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermMetaDatasP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TermMetaDatas(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TermMetaData(p1)),
                    ) => {
                        NonTerminal::TermMetaDatas(
                            rustemo_actions::term_meta_datas_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermMetaDatasP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TermMetaData(p0)) => {
                        NonTerminal::TermMetaDatas(
                            rustemo_actions::term_meta_datas_c2(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UserMetaDataP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Name(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstVal(p1)),
                    ) => {
                        NonTerminal::UserMetaData(
                            rustemo_actions::user_meta_data_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProdKindP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Name(p0)) => {
                        NonTerminal::ProdKind(
                            rustemo_actions::prod_kind_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConstValP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IntConst(p0)) => {
                        NonTerminal::ConstVal(
                            rustemo_actions::const_val_int_const(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConstValP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::FloatConst(p0)) => {
                        NonTerminal::ConstVal(
                            rustemo_actions::const_val_float_const(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConstValP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::BoolConst(p0)) => {
                        NonTerminal::ConstVal(
                            rustemo_actions::const_val_bool_const(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConstValP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::StrConst(p0)) => {
                        NonTerminal::ConstVal(
                            rustemo_actions::const_val_str_const(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PlainAssignment(p0)) => {
                        NonTerminal::Assignment(
                            rustemo_actions::assignment_plain_assignment(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BoolAssignment(p0)) => {
                        NonTerminal::Assignment(
                            rustemo_actions::assignment_bool_assignment(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::GrammarSymbolRef(p0)) => {
                        NonTerminal::Assignment(
                            rustemo_actions::assignment_grammar_symbol_ref(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PlainAssignmentP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Name(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::GrammarSymbolRef(p1)),
                    ) => {
                        NonTerminal::PlainAssignment(
                            rustemo_actions::plain_assignment_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BoolAssignmentP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Name(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::GrammarSymbolRef(p1)),
                    ) => {
                        NonTerminal::BoolAssignment(
                            rustemo_actions::bool_assignment_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProductionGroupP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::GrammarRuleRHS(p0)), _) => {
                        NonTerminal::ProductionGroup(
                            rustemo_actions::production_group_c1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarSymbolRefP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::GrammarSymbol(p0)),
                        Symbol::NonTerminal(NonTerminal::RepetitionOperatorOpt(p1)),
                    ) => {
                        NonTerminal::GrammarSymbolRef(
                            rustemo_actions::grammar_symbol_ref_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionOperatorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::RepetitionOperator(p0)) => {
                        NonTerminal::RepetitionOperatorOpt(
                            rustemo_actions::repetition_operator_opt_repetition_operator(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionOperatorOptP2 => {
                NonTerminal::RepetitionOperatorOpt(
                    rustemo_actions::repetition_operator_opt_empty(context),
                )
            }
            ProdKind::GrammarSymbolRefP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ProductionGroup(p0)),
                        Symbol::NonTerminal(NonTerminal::RepetitionOperatorOpt(p1)),
                    ) => {
                        NonTerminal::GrammarSymbolRef(
                            rustemo_actions::grammar_symbol_ref_c2(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionOperatorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::RepetitionOperatorOp(p0)),
                        Symbol::NonTerminal(NonTerminal::RepetitionModifiersOpt(p1)),
                    ) => {
                        NonTerminal::RepetitionOperator(
                            rustemo_actions::repetition_operator_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionModifiersOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::RepetitionModifiers(p0)) => {
                        NonTerminal::RepetitionModifiersOpt(
                            rustemo_actions::repetition_modifiers_opt_repetition_modifiers(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionModifiersOptP2 => {
                NonTerminal::RepetitionModifiersOpt(
                    rustemo_actions::repetition_modifiers_opt_empty(context),
                )
            }
            ProdKind::RepetitionOperatorOpZeroOrMore => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::RepetitionOperatorOp(
                    rustemo_actions::repetition_operator_op_zero_or_more(context),
                )
            }
            ProdKind::RepetitionOperatorOpZeroOrMoreGreedy => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::RepetitionOperatorOp(
                    rustemo_actions::repetition_operator_op_zero_or_more_greedy(context),
                )
            }
            ProdKind::RepetitionOperatorOpOneOrMore => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::RepetitionOperatorOp(
                    rustemo_actions::repetition_operator_op_one_or_more(context),
                )
            }
            ProdKind::RepetitionOperatorOpOneOrMoreGreedy => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::RepetitionOperatorOp(
                    rustemo_actions::repetition_operator_op_one_or_more_greedy(context),
                )
            }
            ProdKind::RepetitionOperatorOpOptional => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::RepetitionOperatorOp(
                    rustemo_actions::repetition_operator_op_optional(context),
                )
            }
            ProdKind::RepetitionOperatorOpOptionalGreedy => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::RepetitionOperatorOp(
                    rustemo_actions::repetition_operator_op_optional_greedy(context),
                )
            }
            ProdKind::RepetitionModifiersP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::RepetitionModifier1(p0)), _) => {
                        NonTerminal::RepetitionModifiers(
                            rustemo_actions::repetition_modifiers_repetition_modifier1(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionModifier1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::RepetitionModifier1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::RepetitionModifier(p1)),
                    ) => {
                        NonTerminal::RepetitionModifier1(
                            rustemo_actions::repetition_modifier1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionModifier1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::RepetitionModifier(p0)) => {
                        NonTerminal::RepetitionModifier1(
                            rustemo_actions::repetition_modifier1_repetition_modifier(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RepetitionModifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Name(p0)) => {
                        NonTerminal::RepetitionModifier(
                            rustemo_actions::repetition_modifier_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarSymbolP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Name(p0)) => {
                        NonTerminal::GrammarSymbol(
                            rustemo_actions::grammar_symbol_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GrammarSymbolP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::StrConst(p0)) => {
                        NonTerminal::GrammarSymbol(
                            rustemo_actions::grammar_symbol_str_const(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RecognizerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::StrConst(p0)) => {
                        NonTerminal::Recognizer(
                            rustemo_actions::recognizer_str_const(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RecognizerP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::RegexTerm(p0)) => {
                        NonTerminal::Recognizer(
                            rustemo_actions::recognizer_regex_term(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
