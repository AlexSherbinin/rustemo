/// Generated by rustemo on 2022-07-26 13:05:41.731974268 +02:00

use regex::Regex;
use num_enum::TryFromPrimitive;
use std::convert::TryFrom;

use std::marker::PhantomData;
use rustemo_rt::lexer::{Lexer, DefaultLexer, Token, LexerDefinition, RecognizerIterator};
use rustemo_rt::parser::Parser;
use rustemo_rt::lr::{LRParser, LRContext, ParserDefinition};
use rustemo_rt::lr::Action::{self, Shift, Reduce, Accept, Error};
use rustemo_rt::index::{StateIndex, TermIndex, NonTermIndex, ProdIndex};
use rustemo_rt::builder::Builder;
use rustemo_rt::grammar::{TerminalInfo, TerminalInfos, TerminalsState};
use rustemo_rt::debug::{log, logn};

use super::calculator2_actions::*;

const TERMINAL_NO: usize = 9;
const NONTERMINAL_NO: usize = 3;
const STATE_NO: usize = 16;
const MAX_ACTIONS: usize = 7;

#[derive(Debug, Copy, Clone, TryFromPrimitive)]
#[repr(usize)]
pub enum TermKind {
    STOP = 0,
    Plus = 1,
    Sub = 2,
    Mul = 3,
    Div = 4,
    Pow = 5,
    LParen = 6,
    RParen = 7,
    Num = 8,
}

#[derive(Debug, Copy, Clone)]
pub enum NonTermKind {
    EMPTY = 0,
    AUG = 1,
    E = 2,
}

#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal)
}

#[derive(Debug)]
pub enum Terminal {
    STOP,
    Plus,
    Sub,
    Mul,
    Div,
    Pow,
    LParen,
    RParen,
    Num(Num),
}

#[derive(Debug)]
pub enum NonTerminal {
    E(E),
}

#[derive(Copy, Clone, TryFromPrimitive)]
#[repr(usize)]
pub enum ProdKind {
    EP0 = 1,
    EP1 = 2,
    EP2 = 3,
    EP3 = 4,
    EP4 = 5,
    EP5 = 6,
    EP6 = 7,
}

pub struct Calculator2ParserDefinition {
    actions: [[Action; TERMINAL_NO]; STATE_NO],
    gotos: [[Option<StateIndex>; NONTERMINAL_NO]; STATE_NO]
}

pub(in crate) static PARSER_DEFINITION: Calculator2ParserDefinition = Calculator2ParserDefinition {
    actions: [
    // State 0:AUG
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 1:LParen
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 2:Num
    [Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Error, Reduce(ProdIndex(7), 1, NonTermIndex(2), "<?>"), Error],
    // State 3:E
    [Accept, Shift(StateIndex(5), TermIndex(1)), Shift(StateIndex(6), TermIndex(2)), Shift(StateIndex(7), TermIndex(3)), Shift(StateIndex(8), TermIndex(4)), Shift(StateIndex(9), TermIndex(5)), Error, Error, Error],
    // State 4:E
    [Error, Shift(StateIndex(5), TermIndex(1)), Shift(StateIndex(6), TermIndex(2)), Shift(StateIndex(7), TermIndex(3)), Shift(StateIndex(8), TermIndex(4)), Shift(StateIndex(9), TermIndex(5)), Error, Shift(StateIndex(10), TermIndex(7)), Error],
    // State 5:Plus
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 6:Sub
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 7:Mul
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 8:Div
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 9:Pow
    [Error, Error, Error, Error, Error, Error, Shift(StateIndex(1), TermIndex(6)), Error, Shift(StateIndex(2), TermIndex(8))],
    // State 10:RParen
    [Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Error, Reduce(ProdIndex(6), 3, NonTermIndex(2), "<?>"), Error],
    // State 11:E
    [Reduce(ProdIndex(1), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(1), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(1), 3, NonTermIndex(2), "<?>"), Shift(StateIndex(7), TermIndex(3)), Shift(StateIndex(8), TermIndex(4)), Shift(StateIndex(9), TermIndex(5)), Error, Reduce(ProdIndex(1), 3, NonTermIndex(2), "<?>"), Error],
    // State 12:E
    [Reduce(ProdIndex(2), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(2), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(2), 3, NonTermIndex(2), "<?>"), Shift(StateIndex(7), TermIndex(3)), Shift(StateIndex(8), TermIndex(4)), Shift(StateIndex(9), TermIndex(5)), Error, Reduce(ProdIndex(2), 3, NonTermIndex(2), "<?>"), Error],
    // State 13:E
    [Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Shift(StateIndex(9), TermIndex(5)), Error, Reduce(ProdIndex(3), 3, NonTermIndex(2), "<?>"), Error],
    // State 14:E
    [Reduce(ProdIndex(4), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(4), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(4), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(4), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(4), 3, NonTermIndex(2), "<?>"), Shift(StateIndex(9), TermIndex(5)), Error, Reduce(ProdIndex(4), 3, NonTermIndex(2), "<?>"), Error],
    // State 15:E
    [Reduce(ProdIndex(5), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(5), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(5), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(5), 3, NonTermIndex(2), "<?>"), Reduce(ProdIndex(5), 3, NonTermIndex(2), "<?>"), Shift(StateIndex(9), TermIndex(5)), Error, Reduce(ProdIndex(5), 3, NonTermIndex(2), "<?>"), Error],
],
    gotos: [
    // State 0:AUG
    [None, None, Some(StateIndex(3))],
    // State 1:LParen
    [None, None, Some(StateIndex(4))],
    // State 2:Num
    [None, None, None],
    // State 3:E
    [None, None, None],
    // State 4:E
    [None, None, None],
    // State 5:Plus
    [None, None, Some(StateIndex(11))],
    // State 6:Sub
    [None, None, Some(StateIndex(12))],
    // State 7:Mul
    [None, None, Some(StateIndex(13))],
    // State 8:Div
    [None, None, Some(StateIndex(14))],
    // State 9:Pow
    [None, None, Some(StateIndex(15))],
    // State 10:RParen
    [None, None, None],
    // State 11:E
    [None, None, None],
    // State 12:E
    [None, None, None],
    // State 13:E
    [None, None, None],
    // State 14:E
    [None, None, None],
    // State 15:E
    [None, None, None],
]};

impl ParserDefinition for Calculator2ParserDefinition {
    fn action(&self, state_index: StateIndex, term_index: TermIndex) -> Action {
        PARSER_DEFINITION.actions[state_index.0][term_index.0]
    }
    fn goto(&self, state_index: StateIndex, nonterm_index: NonTermIndex) -> StateIndex {
        PARSER_DEFINITION.gotos[state_index.0][nonterm_index.0].unwrap()
    }
}

pub struct Calculator2Parser<'i>(pub LRParser<&'i str, Calculator2ParserDefinition>);

impl<'i, L, B> Parser<L, B> for Calculator2Parser<'i>
where
    L: Lexer<Input = &'i str>,
    B: Builder<Lexer = L>
{
    fn parse(&mut self, lexer: L, mut builder: B) -> B::Output {
        self.0.parse(lexer, builder)
    }
}

impl<'i> Calculator2Parser<'i> {
    pub fn parse_default(&mut self, lexer: Calculator2Lexer<'i>) -> E {
        let builder =
            Calculator2Builder::<'_, <Calculator2Lexer as Lexer>::Input>::new();
        match self.parse(lexer, builder) {
            Symbol::NonTerminal(NonTerminal::E(p)) => p,
            _ => {
                panic!("Invalid return type of inner parse.")
            }
        }
    }
}

impl<'i> Default for Calculator2Parser<'i> {
    fn default() -> Self {
        Self(LRParser {
            context: LRContext {
                parse_stack: vec![StateIndex(0)],
                current_state: StateIndex(0),
                position: 0,
                token: None,
            },
            definition: &PARSER_DEFINITION,
        })
    }
}

pub struct Calculator2LexerDefinition {
    terminals: TerminalInfos<TERMINAL_NO>,
    terminals_for_state: TerminalsState<MAX_ACTIONS, STATE_NO>,
    recognizers: [fn(&str) -> Option<&str>; TERMINAL_NO]
}

pub(in crate) static LEXER_DEFINITION: Calculator2LexerDefinition = Calculator2LexerDefinition {
    terminals: [
    TerminalInfo {
        id: TermIndex(0),
        name: "STOP",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(1),
        name: "Plus",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(2),
        name: "Sub",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(3),
        name: "Mul",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(4),
        name: "Div",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(5),
        name: "Pow",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(6),
        name: "LParen",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(7),
        name: "RParen",
        location: None,
    },
    TerminalInfo {
        id: TermIndex(8),
        name: "Num",
        location: None,
    },
],
    // Expected terminals/tokens indexed by state id.
    // Sorted by priority.
    terminals_for_state: [
    // State 0:AUG
    [Some(8), Some(6), None, None, None, None, None],
    // State 1:LParen
    [Some(8), Some(6), None, None, None, None, None],
    // State 2:Num
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
    // State 3:E
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), None],
    // State 4:E
    [Some(1), Some(2), Some(3), Some(4), Some(5), Some(7), None],
    // State 5:Plus
    [Some(8), Some(6), None, None, None, None, None],
    // State 6:Sub
    [Some(8), Some(6), None, None, None, None, None],
    // State 7:Mul
    [Some(8), Some(6), None, None, None, None, None],
    // State 8:Div
    [Some(8), Some(6), None, None, None, None, None],
    // State 9:Pow
    [Some(8), Some(6), None, None, None, None, None],
    // State 10:RParen
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
    // State 11:E
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
    // State 12:E
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
    // State 13:E
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
    // State 14:E
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
    // State 15:E
    [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5), Some(7)],
],
recognizers: [
    // 0:STOP
    |input: &str| {
        logn!("Recognizing <STOP> -- ");
        if input.len() == 0 {
            log!("recognized");
            Some("")
        } else {
            log!("not recognized");
            None
        }
    },
    // 1:Plus
    |input: &str| {
        logn!("Recognizing <Plus> -- ");
        if input.starts_with("+"){
            log!("recognized");
            Some("+")
        } else {
            log!("not recognized");
            None
        }
    },
    // 2:Sub
    |input: &str| {
        logn!("Recognizing <Sub> -- ");
        if input.starts_with("-"){
            log!("recognized");
            Some("-")
        } else {
            log!("not recognized");
            None
        }
    },
    // 3:Mul
    |input: &str| {
        logn!("Recognizing <Mul> -- ");
        if input.starts_with("*"){
            log!("recognized");
            Some("*")
        } else {
            log!("not recognized");
            None
        }
    },
    // 4:Div
    |input: &str| {
        logn!("Recognizing <Div> -- ");
        if input.starts_with("/"){
            log!("recognized");
            Some("/")
        } else {
            log!("not recognized");
            None
        }
    },
    // 5:Pow
    |input: &str| {
        logn!("Recognizing <Pow> -- ");
        if input.starts_with("^"){
            log!("recognized");
            Some("^")
        } else {
            log!("not recognized");
            None
        }
    },
    // 6:LParen
    |input: &str| {
        logn!("Recognizing <LParen> -- ");
        if input.starts_with("("){
            log!("recognized");
            Some("(")
        } else {
            log!("not recognized");
            None
        }
    },
    // 7:RParen
    |input: &str| {
        logn!("Recognizing <RParen> -- ");
        if input.starts_with(")"){
            log!("recognized");
            Some(")")
        } else {
            log!("not recognized");
            None
        }
    },
    // 8:Num
    |input: &str| {
        logn!("Recognizing <Num> -- ");
        let regex = Regex::new(r#"^\d+(\.\d+)?"#).unwrap();
        let match_str = regex.find(input);
        match match_str {
            Some(x) => {
                let x_str = x.as_str();
                log!("recognized <{}>", x_str);
                Some(x_str)
            },
            None => {
                log!("not recognized");
                None
            }
        }
    },
    ],
};

impl LexerDefinition for Calculator2LexerDefinition {
    type Recognizer = for<'i> fn(&'i str) -> Option<&'i str>;

    fn recognizers(&self, state_index: StateIndex) -> RecognizerIterator<Self::Recognizer> {
            RecognizerIterator {
                terminals: &LEXER_DEFINITION.terminals,
                terminals_for_state: &LEXER_DEFINITION.terminals_for_state[state_index.0][..],
                recognizers: &LEXER_DEFINITION.recognizers,
                index: 0
            }
    }
}

pub struct Calculator2Lexer<'i>(DefaultLexer<'i, Calculator2LexerDefinition>);

impl<'i> Lexer for Calculator2Lexer<'i> {
    type Input = &'i str;

    fn next_token(
        &self,
        context: &mut impl rustemo_rt::parser::Context<Self::Input>,
    ) -> Option<rustemo_rt::lexer::Token<Self::Input>> {
        self.0.next_token(context)
    }
}

// Enables creating a lexer from a reference to an object that can be converted
// to a string reference.
impl<'i, T> From<&'i T> for Calculator2Lexer<'i>
where
    T: AsRef<str> + ?Sized,
{
    fn from(input: &'i T) -> Self {
        Self(DefaultLexer::new(input.as_ref(), &LEXER_DEFINITION))
    }
}

pub struct Calculator2Builder<'i, I: 'i> {
    res_stack: Vec<Symbol>,
    phantom: PhantomData<&'i I>
}

impl<'i, I> Builder for Calculator2Builder<'i, I>
{
    type Output = Symbol;
    type Lexer = Calculator2Lexer<'i>;

    fn new() -> Self {
        Calculator2Builder {
            res_stack: vec![],
            phantom: PhantomData,
        }
    }

    fn shift_action(&mut self, term_idx: TermIndex, token: Token<<Self::Lexer as Lexer>::Input>) {
        let termval = match TermKind::try_from(term_idx.0).unwrap() {
            TermKind::STOP => Terminal::STOP,
            TermKind::Plus => Terminal::Plus,
            TermKind::Sub => Terminal::Sub,
            TermKind::Mul => Terminal::Mul,
            TermKind::Div => Terminal::Div,
            TermKind::Pow => Terminal::Pow,
            TermKind::LParen => Terminal::LParen,
            TermKind::RParen => Terminal::RParen,
            TermKind::Num => Terminal::Num(num(token)),
        };
        self.res_stack.push(Symbol::Terminal(termval));
    }
    
    fn reduce_action(&mut self, prod_kind: ProdIndex, prod_len: usize, _prod_str: &'static str) {
        let prod = match ProdKind::try_from(prod_kind.0).unwrap() {
            ProdKind::EP0 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::E(p0)), _, Symbol::NonTerminal(NonTerminal::E(p1))) => NonTerminal::E(e_p0(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::EP1 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::E(p0)), _, Symbol::NonTerminal(NonTerminal::E(p1))) => NonTerminal::E(e_p1(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::EP2 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::E(p0)), _, Symbol::NonTerminal(NonTerminal::E(p1))) => NonTerminal::E(e_p2(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::EP3 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::E(p0)), _, Symbol::NonTerminal(NonTerminal::E(p1))) => NonTerminal::E(e_p3(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::EP4 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (Symbol::NonTerminal(NonTerminal::E(p0)), _, Symbol::NonTerminal(NonTerminal::E(p1))) => NonTerminal::E(e_p4(p0, p1)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::EP5 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-3).into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {                
                    (_, Symbol::NonTerminal(NonTerminal::E(p0)), _) => NonTerminal::E(e_p5(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
            ProdKind::EP6 => {
                let mut i = self.res_stack.split_off(self.res_stack.len()-1).into_iter();
                match i.next().unwrap() {                
                    Symbol::Terminal(Terminal::Num(p0)) => NonTerminal::E(e_p6(p0)),
                    _ => panic!("Invalid symbol parse stack data.")
                }
            },
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
    fn get_result(&mut self) -> Self::Output {
        self.res_stack.pop().unwrap()
    }
}
