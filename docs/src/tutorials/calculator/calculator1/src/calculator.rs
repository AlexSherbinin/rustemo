/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::{Hash, Hasher};
use rustemo::Result;
use rustemo::lexer::{self, Token};
use rustemo::parser::Parser;
use rustemo::builder::Builder;
use rustemo::lr::builder::LRBuilder;
use rustemo::lr::parser::{LRParser, ParserDefinition};
use rustemo::lr::parser::Action::{self, Shift, Reduce, Accept, Error};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
const TERMINAL_COUNT: usize = 3usize;
const NONTERMINAL_COUNT: usize = 3usize;
const STATE_COUNT: usize = 5usize;
#[allow(dead_code)]
const MAX_ACTIONS: usize = 1usize;
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::lexer::StringLexer;
use super::calculator_actions;
pub type Input = str;
pub type Context<'i> = lexer::Context<'i, Input>;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Operand,
    Operator,
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, Debug)]
pub enum ProdKind {
    ExpressionP1,
}
impl std::fmt::Display for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ExpressionP1 => "Expression: Operand Operator Operand",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Expression,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ExpressionP1 => NonTermKind::Expression,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, Debug)]
pub enum State {
    AUGS0,
    OperandS1,
    ExpressionS2,
    OperatorS3,
    OperandS4,
}
impl std::fmt::Display for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::OperandS1 => "1:Operand",
            State::ExpressionS2 => "2:Expression",
            State::OperatorS3 => "3:Operator",
            State::OperandS4 => "4:Operand",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    Operand(calculator_actions::Operand),
    Operator(calculator_actions::Operator),
}
#[derive(Debug)]
pub enum NonTerminal {
    Expression(calculator_actions::Expression),
}
pub struct CalculatorParserDefinition {
    actions: [[Action<State, ProdKind>; TERMINAL_COUNT]; STATE_COUNT],
    gotos: [[Option<State>; NONTERMINAL_COUNT]; STATE_COUNT],
    token_recognizers: [[Option<TokenRecognizer>; 1usize]; STATE_COUNT],
}
pub(crate) static PARSER_DEFINITION: CalculatorParserDefinition = CalculatorParserDefinition {
    actions: [
        [Error, Shift(State::OperandS1), Error],
        [Error, Error, Shift(State::OperatorS3)],
        [Accept, Error, Error],
        [Error, Shift(State::OperandS4), Error],
        [Reduce(ProdKind::ExpressionP1, 3usize), Error, Error],
    ],
    gotos: [
        [None, None, Some(State::ExpressionS2)],
        [None, None, None],
        [None, None, None],
        [None, None, None],
        [None, None, None],
    ],
    token_recognizers: [
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Operand,
                recognizer: Recognizer::RegexMatch(1usize),
                finish: true,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Operator,
                recognizer: Recognizer::RegexMatch(2usize),
                finish: true,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Operand,
                recognizer: Recognizer::RegexMatch(1usize),
                finish: true,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
                recognizer: Recognizer::Stop,
                finish: true,
            }),
        ],
    ],
};
impl ParserDefinition<TokenRecognizer, State, ProdKind, TokenKind, NonTermKind>
for CalculatorParserDefinition {
    fn action(&self, state: State, token: TokenKind) -> Action<State, ProdKind> {
        PARSER_DEFINITION.actions[state as usize][token as usize]
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize][nonterm as usize].unwrap()
    }
    fn recognizers(&self, state: State) -> Vec<&TokenRecognizer> {
        PARSER_DEFINITION
            .token_recognizers[state as usize]
            .iter()
            .map_while(|tr| tr.as_ref())
            .collect()
    }
}
#[derive(Default)]
pub struct CalculatorParser {
    content: Option<<Input as ToOwned>::Owned>,
}
#[allow(dead_code)]
impl<'i> CalculatorParser {
    pub fn new() -> Self {
        Self { content: None }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse_file<P: AsRef<std::path::Path>>(
        &'i mut self,
        file: P,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        self.content = Some(<Input as rustemo::lexer::Input>::read_file(&file)?);
        let mut context = Context::new(
            file.as_ref().to_string_lossy().to_string(),
            self.content.as_ref().unwrap(),
        );
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse(
        &self,
        input: &'i Input,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let mut context = Context::new("<str>".to_string(), input);
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    fn inner_parse(
        &self,
        context: &mut Context<'i>,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let local_lexer = StringLexer::new(true);
        let lexer = &local_lexer;
        let mut local_builder = DefaultBuilder::new();
        let builder = &mut local_builder;
        let mut parser = LRParser::new(&PARSER_DEFINITION, State::AUGS0, false);
        parser.parse(context, lexer, builder)
    }
}
pub(crate) static RECOGNIZERS: [Option<Lazy<Regex>>; TERMINAL_COUNT] = [
    None,
    Some(Lazy::new(|| { Regex::new(concat!("^", "\\d+(\\.\\d+)?")).unwrap() })),
    Some(Lazy::new(|| { Regex::new(concat!("^", "\\+|-|\\*|/")).unwrap() })),
];
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(usize),
}
#[derive(Debug)]
pub struct TokenRecognizer {
    token_kind: TokenKind,
    recognizer: Recognizer,
    finish: bool,
}
impl lexer::TokenRecognizer for TokenRecognizer {
    type TokenKind = TokenKind;
    type Input = str;
    fn recognize<'i>(&self, input: &'i str) -> Option<&'i str> {
        match &self.recognizer {
            Recognizer::StrMatch(s) => {
                logn!("{} <{:?}> --", "\tRecognizing".green(), self.token_kind());
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            Recognizer::RegexMatch(r) => {
                logn!("{} <{:?}> --", "\tRecognizing".green(), self.token_kind());
                let match_str = RECOGNIZERS[*r].as_ref().unwrap().find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} <{}>", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    None => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            Recognizer::Stop => {
                logn!("{}  <STOP> -- ", "\tRecognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
    #[inline]
    fn token_kind(&self) -> TokenKind {
        self.token_kind
    }
    #[inline]
    fn finish(&self) -> bool {
        self.finish
    }
}
impl PartialEq for TokenRecognizer {
    fn eq(&self, other: &Self) -> bool {
        self.token_kind == other.token_kind
    }
}
impl Eq for TokenRecognizer {}
impl Hash for TokenRecognizer {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.token_kind.hash(state);
    }
}
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl Builder for DefaultBuilder {
    type Output = calculator_actions::Expression;
    fn new() -> Self {
        Self { res_stack: vec![] }
    }
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Expression(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, ProdKind, TokenKind> for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::Operand => {
                Terminal::Operand(calculator_actions::operand(context, token))
            }
            TokenKind::Operator => {
                Terminal::Operator(calculator_actions::operator(context, token))
            }
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Operand(p0)),
                        Symbol::Terminal(Terminal::Operator(p1)),
                        Symbol::Terminal(Terminal::Operand(p2)),
                    ) => {
                        NonTerminal::Expression(
                            calculator_actions::expression_c1(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
